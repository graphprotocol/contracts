{
  "contractName": "ERC20Mintable",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.2+commit.1df8f40c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC20 minting logic\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"value\":\"The amount of tokens to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"ERC20Mintable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20Mintable.sol\":\"ERC20Mintable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20.sol\":{\"keccak256\":\"0xa67c3a7d4074f354863fe76695349b554fc693f48008ef2a49fcd982a66e5e6c\",\"urls\":[\"bzzr://61a17e19985022da9a538a50b92c23ecffd3c303498dd97ecf01e4a943ea2e5a\"]},\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20Mintable.sol\":{\"keccak256\":\"0xd0fc54d4e208a4392b9dbc6e681b0fd9bd2646d69b48adff7fcabd2f78232a58\",\"urls\":[\"bzzr://800611b8a2f639e8491656e1d1d2bb498e7cb7551124b4133125fc7f28a8a8af\"]},\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]},\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/MinterRole.sol\":{\"keccak256\":\"0xc53493865cd066394fb32f3220b27be196b53cb11bb02953a6056e5dec3a3019\",\"urls\":[\"bzzr://4aff7d0c622d41a61f09a1713d99b8bd6bf20ef1081d941bace700d562261e01\"]},\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/Roles.sol\":{\"keccak256\":\"0x659ba0f9a3392cd50a8a5fafaf5dfd8c6a0878f6a4613bceff4e90dceddcd865\",\"urls\":[\"bzzr://f704341d520fbc98716541f1b3f67737f0ee6e94adf072a66acb2bd25d593c2b\"]},\"/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]}},\"version\":1}",
  "bytecode": "0x60806040526100163364010000000061001b810204565b6100f8565b61003360038264010000000061085461006a82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a038116151561007f57600080fd5b61009282826401000000006100c1810204565b1561009c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156100d857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61091a806101076000396000f3fe608060405234801561001057600080fd5b50600436106100f1576000357c010000000000000000000000000000000000000000000000000000000090048063983b2d561161009e578063a9059cbb11610078578063a9059cbb14610260578063aa271e1a1461028c578063dd62ed3e146102b2576100f1565b8063983b2d5614610204578063986502751461022c578063a457c2d714610234576100f1565b806339509351116100cf578063395093511461018657806340c10f19146101b257806370a08231146101de576100f1565b8063095ea7b3146100f657806318160ddd1461013657806323b872dd14610150575b600080fd5b6101226004803603604081101561010c57600080fd5b50600160a060020a0381351690602001356102e0565b604080519115158252519081900360200190f35b61013e61035e565b60408051918252519081900360200190f35b6101226004803603606081101561016657600080fd5b50600160a060020a03813581169160208101359091169060400135610364565b6101226004803603604081101561019c57600080fd5b50600160a060020a03813516906020013561042d565b610122600480360360408110156101c857600080fd5b50600160a060020a0381351690602001356104dd565b61013e600480360360208110156101f457600080fd5b5035600160a060020a0316610506565b61022a6004803603602081101561021a57600080fd5b5035600160a060020a0316610521565b005b61022a610541565b6101226004803603604081101561024a57600080fd5b50600160a060020a03813516906020013561054c565b6101226004803603604081101561027657600080fd5b50600160a060020a038135169060200135610597565b610122600480360360208110156102a257600080fd5b5035600160a060020a03166105a4565b61013e600480360360408110156102c857600080fd5b50600160a060020a03813581169160200135166105bd565b6000600160a060020a03831615156102f757600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610398908363ffffffff6105e816565b600160a060020a03851660009081526001602090815260408083203384529091529020556103c78484846105fd565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561044457600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610478908363ffffffff6106ca16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006104e8336105a4565b15156104f357600080fd5b6104fd83836106e3565b50600192915050565b600160a060020a031660009081526020819052604090205490565b61052a336105a4565b151561053557600080fd5b61053e8161078d565b50565b61054a336107d5565b565b6000600160a060020a038316151561056357600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610478908363ffffffff6105e816565b60006104fd3384846105fd565b60006105b760038363ffffffff61081d16565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156105f757600080fd5b50900390565b600160a060020a038216151561061257600080fd5b600160a060020a03831660009081526020819052604090205461063b908263ffffffff6105e816565b600160a060020a038085166000908152602081905260408082209390935590841681522054610670908263ffffffff6106ca16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156106dc57600080fd5b9392505050565b600160a060020a03821615156106f857600080fd5b60025461070b908263ffffffff6106ca16565b600255600160a060020a038216600090815260208190526040902054610737908263ffffffff6106ca16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b61079e60038263ffffffff61085416565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6107e660038263ffffffff6108a216565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a038216151561083457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a038116151561086957600080fd5b610873828261081d565b1561087d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03811615156108b757600080fd5b6108c1828261081d565b15156108cc57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a7230582099f3e37bb1de3ca53cead9a87e274347167d0bdc13a212e31f0b99b2e866b3740029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f1576000357c010000000000000000000000000000000000000000000000000000000090048063983b2d561161009e578063a9059cbb11610078578063a9059cbb14610260578063aa271e1a1461028c578063dd62ed3e146102b2576100f1565b8063983b2d5614610204578063986502751461022c578063a457c2d714610234576100f1565b806339509351116100cf578063395093511461018657806340c10f19146101b257806370a08231146101de576100f1565b8063095ea7b3146100f657806318160ddd1461013657806323b872dd14610150575b600080fd5b6101226004803603604081101561010c57600080fd5b50600160a060020a0381351690602001356102e0565b604080519115158252519081900360200190f35b61013e61035e565b60408051918252519081900360200190f35b6101226004803603606081101561016657600080fd5b50600160a060020a03813581169160208101359091169060400135610364565b6101226004803603604081101561019c57600080fd5b50600160a060020a03813516906020013561042d565b610122600480360360408110156101c857600080fd5b50600160a060020a0381351690602001356104dd565b61013e600480360360208110156101f457600080fd5b5035600160a060020a0316610506565b61022a6004803603602081101561021a57600080fd5b5035600160a060020a0316610521565b005b61022a610541565b6101226004803603604081101561024a57600080fd5b50600160a060020a03813516906020013561054c565b6101226004803603604081101561027657600080fd5b50600160a060020a038135169060200135610597565b610122600480360360208110156102a257600080fd5b5035600160a060020a03166105a4565b61013e600480360360408110156102c857600080fd5b50600160a060020a03813581169160200135166105bd565b6000600160a060020a03831615156102f757600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610398908363ffffffff6105e816565b600160a060020a03851660009081526001602090815260408083203384529091529020556103c78484846105fd565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561044457600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610478908363ffffffff6106ca16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006104e8336105a4565b15156104f357600080fd5b6104fd83836106e3565b50600192915050565b600160a060020a031660009081526020819052604090205490565b61052a336105a4565b151561053557600080fd5b61053e8161078d565b50565b61054a336107d5565b565b6000600160a060020a038316151561056357600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610478908363ffffffff6105e816565b60006104fd3384846105fd565b60006105b760038363ffffffff61081d16565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156105f757600080fd5b50900390565b600160a060020a038216151561061257600080fd5b600160a060020a03831660009081526020819052604090205461063b908263ffffffff6105e816565b600160a060020a038085166000908152602081905260408082209390935590841681522054610670908263ffffffff6106ca16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156106dc57600080fd5b9392505050565b600160a060020a03821615156106f857600080fd5b60025461070b908263ffffffff6106ca16565b600255600160a060020a038216600090815260208190526040902054610737908263ffffffff6106ca16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b61079e60038263ffffffff61085416565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6107e660038263ffffffff6108a216565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a038216151561083457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a038116151561086957600080fd5b610873828261081d565b1561087d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03811615156108b757600080fd5b6108c1828261081d565b15156108cc57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a7230582099f3e37bb1de3ca53cead9a87e274347167d0bdc13a212e31f0b99b2e866b3740029",
  "sourceMap": "135:421:12:-;;;274:22:14;285:10;274;;;;:22;:::i;:::-;135:421:12;;684:119:14;740:21;:8;753:7;740:12;;;;;;:21;:::i;:::-;776:20;;-1:-1:-1;;;;;776:20:14;;;;;;;;684:119;:::o;259:181:15:-;-1:-1:-1;;;;;335:21:15;;;;327:30;;;;;;376:18;380:4;386:7;376:3;;;;:18;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:15;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:15;429:4;406:27;;;259:181::o;786:162::-;858:4;-1:-1:-1;;;;;882:21:15;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:15;:11;:20;;;;;;;;;;;;;;;786:162::o;135:421:12:-;;;;;;;",
  "deployedSourceMap": "135:421:12:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;135:421:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2726:238:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2726:238:9;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;927:89;;;:::i;:::-;;;;;;;;;;;;;;;;3427:294;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3427:294:9;;;;;;;;;;;;;;;;;:::i;4224:317::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4224:317:9;;;;;;;;:::i;426:128:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;426:128:12;;;;;;;;:::i;1225:104:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1225:104:9;-1:-1:-1;;;;;1225:104:9;;:::i;507:90:14:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;507:90:14;-1:-1:-1;;;;;507:90:14;;:::i;:::-;;603:75;;;:::i;5049:327:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5049:327:9;;;;;;;;:::i;1953:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1953:137:9;;;;;;;;:::i;394:107:14:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;394:107:14;-1:-1:-1;;;;;394:107:14;;:::i;1660:129:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1660:129:9;;;;;;;;;;:::i;2726:238::-;2791:4;-1:-1:-1;;;;;2815:21:9;;;;2807:30;;;;;;2857:10;2848:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;2848:29:9;;;;;;;;;;;;:37;;;2900:36;;;;;;;2848:29;;2857:10;2900:36;;;;;;;;;;;-1:-1:-1;2953:4:9;2726:238;;;;:::o;927:89::-;997:12;;927:89;:::o;3427:294::-;-1:-1:-1;;;;;3551:14:9;;3506:4;3551:14;;;:8;:14;;;;;;;;3566:10;3551:26;;;;;;;;:37;;3582:5;3551:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3522:14:9;;;;;;:8;:14;;;;;;;;3537:10;3522:26;;;;;;;:66;3598:26;3531:4;3614:2;3618:5;3598:9;:26::i;:::-;-1:-1:-1;;;;;3639:54:9;;3666:14;;;;:8;:14;;;;;;;;3654:10;3666:26;;;;;;;;;;;3639:54;;;;;;;3654:10;;3639:54;;;;;;;;;;;;-1:-1:-1;3710:4:9;3427:294;;;;;:::o;4224:317::-;4304:4;-1:-1:-1;;;;;4328:21:9;;;;4320:30;;;;;;4402:10;4393:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4393:29:9;;;;;;;;;;:45;;4427:10;4393:45;:33;:45;:::i;:::-;4370:10;4361:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4361:29:9;;;;;;;;;;;;:77;;;4453:60;;;;;;4361:29;;4453:60;;;;;;;;;;;-1:-1:-1;4530:4:9;4224:317;;;;:::o;426:128:12:-;494:4;349:20:14;358:10;349:8;:20::i;:::-;341:29;;;;;;;;510:16:12;516:2;520:5;510;:16::i;:::-;-1:-1:-1;543:4:12;426:128;;;;:::o;1225:104:9:-;-1:-1:-1;;;;;1306:16:9;1280:7;1306:16;;;;;;;;;;;;1225:104::o;507:90:14:-;349:20;358:10;349:8;:20::i;:::-;341:29;;;;;;;;571:19;582:7;571:10;:19::i;:::-;507:90;:::o;603:75::-;646:25;660:10;646:13;:25::i;:::-;603:75::o;5049:327:9:-;5134:4;-1:-1:-1;;;;;5158:21:9;;;;5150:30;;;;;;5232:10;5223:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5223:29:9;;;;;;;;;;:50;;5257:15;5223:50;:33;:50;:::i;1953:137::-;2014:4;2030:32;2040:10;2052:2;2056:5;2030:9;:32::i;394:107:14:-;450:4;473:21;:8;486:7;473:21;:12;:21;:::i;:::-;466:28;394:107;-1:-1:-1;;394:107:14:o;1660:129:9:-;-1:-1:-1;;;;;1758:15:9;;;1732:7;1758:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1660:129::o;1205:145:16:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:16;;;1205:145::o;5590:256:9:-;-1:-1:-1;;;;;5677:16:9;;;;5669:25;;;;;;-1:-1:-1;;;;;5723:15:9;;:9;:15;;;;;;;;;;;:26;;5743:5;5723:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5705:15:9;;;:9;:15;;;;;;;;;;;:44;;;;5775:13;;;;;;;:24;;5793:5;5775:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;5759:13:9;;;:9;:13;;;;;;;;;;;;:40;;;;5814:25;;;;;;;5759:13;;5814:25;;;;;;;;;;;;;5590:256;;;:::o;1431:145:16:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:16:o;6189:263:9:-;-1:-1:-1;;;;;6263:21:9;;;;6255:30;;;;;;6311:12;;:23;;6328:5;6311:23;:16;:23;:::i;:::-;6296:12;:38;-1:-1:-1;;;;;6365:18:9;;:9;:18;;;;;;;;;;;:29;;6388:5;6365:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6344:18:9;;:9;:18;;;;;;;;;;;:50;;;;6409:36;;;;;;;6344:18;;:9;;6409:36;;;;;;;;;;6189:263;;:::o;684:119:14:-;740:21;:8;753:7;740:21;:12;:21;:::i;:::-;776:20;;-1:-1:-1;;;;;776:20:14;;;;;;;;684:119;:::o;809:127::-;868:24;:8;884:7;868:24;:15;:24;:::i;:::-;907:22;;-1:-1:-1;;;;;907:22:14;;;;;;;;809:127;:::o;786:162:15:-;858:4;-1:-1:-1;;;;;882:21:15;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:15;:11;:20;;;;;;;;;;;;;;;786:162::o;259:181::-;-1:-1:-1;;;;;335:21:15;;;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:15;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:15;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:15;;;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;;;-1:-1:-1;;;;;663:20:15;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:15;;;514:184::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\nimport \"./MinterRole.sol\";\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n",
  "sourcePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20Mintable.sol",
  "ast": {
    "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        6623
      ]
    },
    "id": 6624,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6597,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 6598,
        "nodeType": "ImportDirective",
        "scope": 6624,
        "sourceUnit": 6507,
        "src": "25:21:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/MinterRole.sol",
        "file": "./MinterRole.sol",
        "id": 6599,
        "nodeType": "ImportDirective",
        "scope": 6624,
        "sourceUnit": 6796,
        "src": "47:26:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6600,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6506,
              "src": "161:5:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$6506",
                "typeString": "contract ERC20"
              }
            },
            "id": 6601,
            "nodeType": "InheritanceSpecifier",
            "src": "161:5:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6602,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6795,
              "src": "168:10:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$6795",
                "typeString": "contract MinterRole"
              }
            },
            "id": 6603,
            "nodeType": "InheritanceSpecifier",
            "src": "168:10:12"
          }
        ],
        "contractDependencies": [
          6506,
          6692,
          6795
        ],
        "contractKind": "contract",
        "documentation": "@title ERC20Mintable\n@dev ERC20 minting logic",
        "fullyImplemented": true,
        "id": 6623,
        "linearizedBaseContracts": [
          6623,
          6795,
          6506,
          6692
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6621,
              "nodeType": "Block",
              "src": "500:54:12",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6615,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6605,
                        "src": "516:2:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 6616,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6607,
                        "src": "520:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6614,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6421,
                      "src": "510:5:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 6617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "510:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6618,
                  "nodeType": "ExpressionStatement",
                  "src": "510:16:12"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 6619,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "543:4:12",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 6613,
                  "id": 6620,
                  "nodeType": "Return",
                  "src": "536:11:12"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param value The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 6622,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 6610,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 6609,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 6728,
                  "src": "474:10:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "474:10:12"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6605,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "440:10:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6604,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "440:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6607,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "452:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6606,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "452:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "439:27:12"
            },
            "returnParameters": {
              "id": 6613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6612,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "494:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6611,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "493:6:12"
            },
            "scope": 6623,
            "src": "426:128:12",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6624,
        "src": "135:421:12"
      }
    ],
    "src": "0:557:12"
  },
  "legacyAST": {
    "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        6623
      ]
    },
    "id": 6624,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6597,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 6598,
        "nodeType": "ImportDirective",
        "scope": 6624,
        "sourceUnit": 6507,
        "src": "25:21:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/davidkajpust/coding-no-icloud-backup/thegraph/dave/contracts/contracts/openzeppelin/MinterRole.sol",
        "file": "./MinterRole.sol",
        "id": 6599,
        "nodeType": "ImportDirective",
        "scope": 6624,
        "sourceUnit": 6796,
        "src": "47:26:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6600,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6506,
              "src": "161:5:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$6506",
                "typeString": "contract ERC20"
              }
            },
            "id": 6601,
            "nodeType": "InheritanceSpecifier",
            "src": "161:5:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6602,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6795,
              "src": "168:10:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$6795",
                "typeString": "contract MinterRole"
              }
            },
            "id": 6603,
            "nodeType": "InheritanceSpecifier",
            "src": "168:10:12"
          }
        ],
        "contractDependencies": [
          6506,
          6692,
          6795
        ],
        "contractKind": "contract",
        "documentation": "@title ERC20Mintable\n@dev ERC20 minting logic",
        "fullyImplemented": true,
        "id": 6623,
        "linearizedBaseContracts": [
          6623,
          6795,
          6506,
          6692
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6621,
              "nodeType": "Block",
              "src": "500:54:12",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6615,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6605,
                        "src": "516:2:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 6616,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6607,
                        "src": "520:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 6614,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6421,
                      "src": "510:5:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 6617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "510:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6618,
                  "nodeType": "ExpressionStatement",
                  "src": "510:16:12"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 6619,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "543:4:12",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 6613,
                  "id": 6620,
                  "nodeType": "Return",
                  "src": "536:11:12"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param value The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 6622,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 6610,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 6609,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 6728,
                  "src": "474:10:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "474:10:12"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6605,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "440:10:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6604,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "440:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6607,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "452:13:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6606,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "452:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "439:27:12"
            },
            "returnParameters": {
              "id": 6613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6612,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6622,
                  "src": "494:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6611,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "493:6:12"
            },
            "scope": 6623,
            "src": "426:128:12",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 6624,
        "src": "135:421:12"
      }
    ],
    "src": "0:557:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-07-31T14:21:55.305Z",
  "devdoc": {
    "details": "ERC20 minting logic",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "value": "The amount of tokens to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "ERC20Mintable"
  },
  "userdoc": {
    "methods": {}
  }
}