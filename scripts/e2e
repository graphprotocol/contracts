#!/bin/bash

set -eo pipefail
source $(pwd)/scripts/evm

### > SCRIPT CONFIG <
# Allow overriding config
ADDRESS_BOOK=${ADDRESS_BOOK:-"addresses-local.json"}
ARBITRUM_ADDRESS_BOOK=${ARBITRUM_ADDRESS_BOOK:-"arbitrum-addresses-local.json"}
ARBITRUM_DEPLOYMENT_FILE=${ARBITRUM_DEPLOYMENT_FILE:-"localNetwork.json"}

L1_NETWORK=${L1_NETWORK}
L2_NETWORK=${L2_NETWORK}

L1_GRAPH_CONFIG=${L1_GRAPH_CONFIG:-"config/graph.localhost.yml"}
L2_GRAPH_CONFIG=${L2_GRAPH_CONFIG:-"config/graph.arbitrum-localhost.yml"}

echo "Running e2e tests"
echo "- Using address book: $ADDRESS_BOOK"

if [[ -n "$L1_NETWORK" ]]; then
  echo "- Using L1 network: $L1_NETWORK"
  echo "- Using L1 config: $L1_GRAPH_CONFIG"
else 
  echo "- No L1_NETWORK provided, skipping L1 tests"
fi

if [[ -n "$L2_NETWORK" ]]; then
  echo "- Using L2 network: $L2_NETWORK"
  echo "- Using L2 config: $L2_GRAPH_CONFIG"
  echo "- Using arbitrum address book: $ARBITRUM_ADDRESS_BOOK"
  echo "- Using arbitrum deployment file: $ARBITRUM_DEPLOYMENT_FILE"
else 
  echo "- No L2_NETWORK provided, skipping L2 tests"
fi

if [[ -z "$L1_NETWORK" ]] && [[ -z "$L2_NETWORK" ]]; then
  echo "Must specify one of L1_NETWORK or L2_NETWORK!"
  exit 0
fi

if [[ "$L1_NETWORK" == "$L2_NETWORK" ]]; then
  echo "L1_NETWORK and L2_NETWORK must be different networks!"
  exit 0
fi

### > SCRIPT AUX FUNCTIONS <
function pre_deploy() {
  local NETWORK=$1
  local GRAPH_CONFIG=$2

  # Create named accounts
  npx hardhat migrate:accounts --network "$NETWORK" --graph-config "$GRAPH_CONFIG"

  # Fund accounts if using nitro test nodes
  if [[ "$NETWORK" == *"localnitro"* ]]; then
    npx hardhat nitro:fund-accounts --network "$NETWORK" --graph-config "$GRAPH_CONFIG"
  fi
}

function deploy() {
  local NETWORK=$1
  local GRAPH_CONFIG=$2
  local ADDRESS_BOOK=$3

  # Deploy protocol
  npx hardhat migrate \
    --network "$NETWORK" \
    --skip-confirmation \
    --auto-mine \
    --force \
    --graph-config "$GRAPH_CONFIG" \
    --address-book "$ADDRESS_BOOK"
}

function post_deploy () {
  local NETWORK=$1
  local GRAPH_CONFIG=$2
  local ADDRESS_BOOK=$3

  # Governor to accept contracts ownership 
  npx hardhat migrate:ownership --network "$NETWORK" --graph-config "$GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
  
  # Unpause the protocol
  npx hardhat migrate:unpause:protocol --network "$NETWORK" --graph-config "$GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
}

function configure_bridge () {
  local L1_NETWORK=$1
  local L1_GRAPH_CONFIG=$2
  local L2_NETWORK=$3
  local L2_GRAPH_CONFIG=$4
  local ADDRESS_BOOK=$5
  local ARBITRUM_ADDRESS_BOOK=$6
  local ARBITRUM_DEPLOYMENT_FILE=$7

  # These settings are only used for CLI bridge commands
  # so we keep them here to avoid confusion with hardhat based tasks
  local L1_CHAIN_ID=${L1_CHAIN_ID:-"1337"}
  local L2_CHAIN_ID=${L2_CHAIN_ID:-"412346"}

  local L1_RPC=${L1_RPC:-"http://localhost:8545"}
  local L2_RPC=${L2_RPC:-"http://localhost:8547"}

  local L1_MNEMONIC=${L1_MNEMONIC:-"myth like bonus scare over problem client lizard pioneer submit female collect"}
  local L2_MNEMONIC=${L2_MNEMONIC:-"urge never interest human any economy gentle canvas anxiety pave unlock find"}

  # Copy required arbitrum contract addresses to the local arbitrum address book
  if [[ "$L1_NETWORK" == *"localnitro"* ]]; then
    npx hardhat nitro:address-book-setup --deployment-file "$ARBITRUM_DEPLOYMENT_FILE" --arbitrum-address-book "$ARBITRUM_ADDRESS_BOOK"
  fi

  # Configure the bridge
  ./cli/cli.ts -a "$ADDRESS_BOOK" -p "$L2_RPC" -m "$L2_MNEMONIC" -n 2 -r "$ARBITRUM_ADDRESS_BOOK" protocol configure-l2-bridge "$L1_CHAIN_ID"
  ./cli/cli.ts -a "$ADDRESS_BOOK" -p "$L1_RPC" -m "$L1_MNEMONIC" -n 2 -r "$ARBITRUM_ADDRESS_BOOK" protocol configure-l1-bridge "$L2_CHAIN_ID"

  # Unpause the bridge
  npx hardhat migrate:unpause:bridge --network "$L2_NETWORK" --graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
  npx hardhat migrate:unpause:bridge --network "$L1_NETWORK" --graph-config "$L1_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
}

function test_e2e () {
  local NETWORK=$1
  local L1_GRAPH_CONFIG=$2
  local L2_GRAPH_CONFIG=$3
  local ADDRESS_BOOK=$4
  local SKIP_BRIDGE_TESTS=$5

  if [[ -z "$SKIP_BRIDGE_TESTS" ]]; then
    npx hardhat e2e --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
  else
    npx hardhat e2e --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK" --skip-bridge
  fi
}

function test_e2e_scenarios () {
  local NETWORK=$1
  local L1_GRAPH_CONFIG=$2
  local L2_GRAPH_CONFIG=$3
  local ADDRESS_BOOK=$4

  npx hardhat e2e:scenario create-subgraphs --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
  npx hardhat e2e:scenario open-allocations --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"

  # skip close-allocations for arbitrum testnodes as we can't advance epoch
  if [[ "$NETWORK" != *"localnitro"* ]]; then
    npx hardhat e2e:scenario close-allocations --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
  fi
}

function test_e2e_scenarios_bridge () {
  local NETWORK=$1
  local L1_GRAPH_CONFIG=$2
  local L2_GRAPH_CONFIG=$3
  local ADDRESS_BOOK=$4

  npx hardhat e2e:scenario send-grt-to-l2 --network "$NETWORK" --l1-graph-config "$L1_GRAPH_CONFIG" --l2-graph-config "$L2_GRAPH_CONFIG" --address-book "$ADDRESS_BOOK"
}


### > SCRIPT START < ###
## SETUP
# Compile contracts
yarn build

# Start evm
if [[ "$L1_NETWORK" == "localhost" || "$L2_NETWORK" == "localhost" ]]; then
  evm_kill
  evm_start
fi

# Create address book if needed
if [[ ! -f "$ADDRESS_BOOK" ]]; then
  echo '{}' > "$ADDRESS_BOOK"
fi

# Create arbitrum address book if needed
if [[ ! -f "$ARBITRUM_ADDRESS_BOOK" ]]; then
    echo '{}' > "$ARBITRUM_ADDRESS_BOOK"
fi

## DEPLOY
# Deploy L1
if [[ -n "$L1_NETWORK" ]]; then
  echo "Deploying L1 protocol"
  pre_deploy "$L1_NETWORK" "$L1_GRAPH_CONFIG"
  deploy "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$ADDRESS_BOOK"
  post_deploy "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$ADDRESS_BOOK"
fi

# Deploy L2
if [[ -n "$L2_NETWORK" ]]; then
  echo "Deploying L2 protocol"
  pre_deploy "$L2_NETWORK" "$L2_GRAPH_CONFIG"
  deploy "$L2_NETWORK" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
  post_deploy "$L2_NETWORK" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
fi

# Configure bridge
if [[ -n "$L1_NETWORK" ]] && [[ -n "$L2_NETWORK" ]]; then
  configure_bridge "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$L2_NETWORK" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK" "$ARBITRUM_ADDRESS_BOOK" "$ARBITRUM_DEPLOYMENT_FILE"
fi

## TEST
# Run e2e tests
if [[ -z "$L2_NETWORK" ]]; then
  test_e2e "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK" true
else
  test_e2e "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
  test_e2e "$L2_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
fi

# Run scenario tests
test_e2e_scenarios "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
if [[ -n "$L2_NETWORK" ]]; then
  test_e2e_scenarios_bridge "$L1_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
  test_e2e_scenarios "$L2_NETWORK" "$L1_GRAPH_CONFIG" "$L2_GRAPH_CONFIG" "$ADDRESS_BOOK"
fi

## Cleanup
# Exit error mode so the evm instance always gets killed
if [[ "$L1_NETWORK" == "localhost" || "$L2_NETWORK" == "localhost" ]]; then
  set +e
  result=0

  evm_kill
  exit $result
fi
