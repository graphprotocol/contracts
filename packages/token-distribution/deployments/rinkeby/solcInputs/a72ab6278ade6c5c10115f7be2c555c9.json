{
  "language": "Solidity",
  "sources": {
    "contracts/GraphTokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/**\n * @title GraphTokenDistributor\n * @dev Contract that allows distribution of tokens to multiple beneficiaries.\n * The contract accept deposits in the configured token by anyone.\n * The owner can setup the desired distribution by setting the amount of tokens\n * assigned to each beneficiary account.\n * Beneficiaries claim for their allocated tokens.\n * Only the owner can withdraw tokens from this contract without limitations.\n * For the distribution to work this contract must be unlocked by the owner.\n */\ncontract GraphTokenDistributor is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // -- State --\n\n    bool public locked;\n    mapping(address => uint256) public beneficiaries;\n\n    IERC20 public token;\n\n    // -- Events --\n\n    event BeneficiaryUpdated(address indexed beneficiary, uint256 amount);\n    event TokensDeposited(address indexed sender, uint256 amount);\n    event TokensWithdrawn(address indexed sender, uint256 amount);\n    event TokensClaimed(address indexed beneficiary, address to, uint256 amount);\n    event LockUpdated(bool locked);\n\n    modifier whenNotLocked() {\n        require(locked == false, \"Distributor: Claim is locked\");\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param _token Token to use for deposits and withdrawals\n     */\n    constructor(IERC20 _token) {\n        token = _token;\n        locked = true;\n    }\n\n    /**\n     * Deposit tokens into the contract.\n     * Even if the ERC20 token can be transferred directly to the contract\n     * this function provide a safe interface to do the transfer and avoid mistakes\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount) external {\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    // -- Admin functions --\n\n    /**\n     * Add token balance available for account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function addBeneficiaryTokens(address _account, uint256 _amount) external onlyOwner {\n        _setBeneficiaryTokens(_account, beneficiaries[_account].add(_amount));\n    }\n\n    /**\n     * Add token balance available for multiple accounts.\n     * @param _accounts Addresses to assign tokens to\n     * @param _amounts Amounts of tokens to assign to beneficiary\n     */\n    function addBeneficiaryTokensMulti(address[] calldata _accounts, uint256[] calldata _amounts) external onlyOwner {\n        require(_accounts.length == _amounts.length, \"Distributor: !length\");\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _setBeneficiaryTokens(_accounts[i], beneficiaries[_accounts[i]].add(_amounts[i]));\n        }\n    }\n\n    /**\n     * Remove token balance available for account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function subBeneficiaryTokens(address _account, uint256 _amount) external onlyOwner {\n        _setBeneficiaryTokens(_account, beneficiaries[_account].sub(_amount));\n    }\n\n    /**\n     * Remove token balance available for multiple accounts.\n     * @param _accounts Addresses to assign tokens to\n     * @param _amounts Amounts of tokens to assign to beneficiary\n     */\n    function subBeneficiaryTokensMulti(address[] calldata _accounts, uint256[] calldata _amounts) external onlyOwner {\n        require(_accounts.length == _amounts.length, \"Distributor: !length\");\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _setBeneficiaryTokens(_accounts[i], beneficiaries[_accounts[i]].sub(_amounts[i]));\n        }\n    }\n\n    /**\n     * Set amount of tokens available for beneficiary account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function _setBeneficiaryTokens(address _account, uint256 _amount) private {\n        require(_account != address(0), \"Distributor: !account\");\n\n        beneficiaries[_account] = _amount;\n        emit BeneficiaryUpdated(_account, _amount);\n    }\n\n    /**\n     * Set locked withdrawals.\n     * @param _locked True to lock withdrawals\n     */\n    function setLocked(bool _locked) external onlyOwner {\n        locked = _locked;\n        emit LockUpdated(_locked);\n    }\n\n    /**\n     * Withdraw tokens from the contract. This function is included as\n     * a escape hatch in case of mistakes or to recover remaining funds.\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external onlyOwner {\n        token.safeTransfer(msg.sender, _amount);\n        emit TokensWithdrawn(msg.sender, _amount);\n    }\n\n    // -- Beneficiary functions --\n\n    /**\n     * Claim tokens and send to caller.\n     */\n    function claim() external whenNotLocked {\n        claimTo(msg.sender);\n    }\n\n    /**\n     * Claim tokens and send to address.\n     * @param _to Address where to send tokens\n     */\n    function claimTo(address _to) public whenNotLocked {\n        uint256 claimableTokens = beneficiaries[msg.sender];\n        require(claimableTokens > 0, \"Distributor: Unavailable funds\");\n\n        _setBeneficiaryTokens(msg.sender, 0);\n\n        token.safeTransfer(_to, claimableTokens);\n        emit TokensClaimed(msg.sender, _to, claimableTokens);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GraphTokenLockWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./GraphTokenLock.sol\";\nimport \"./IGraphTokenLockManager.sol\";\n\n/**\n * @title GraphTokenLockWallet\n * @notice This contract is built on top of the base GraphTokenLock functionality.\n * It allows wallet beneficiaries to use the deposited funds to perform specific function calls\n * on specific contracts.\n *\n * The idea is that supporters with locked tokens can participate in the protocol\n * but disallow any release before the vesting/lock schedule.\n * The beneficiary can issue authorized function calls to this contract that will\n * get forwarded to a target contract. A target contract is any of our protocol contracts.\n * The function calls allowed are queried to the GraphTokenLockManager, this way\n * the same configuration can be shared for all the created lock wallet contracts.\n *\n * NOTE: Contracts used as target must have its function signatures checked to avoid collisions\n * with any of this contract functions.\n * Beneficiaries need to approve the use of the tokens to the protocol contracts. For convenience\n * the maximum amount of tokens is authorized.\n */\ncontract GraphTokenLockWallet is GraphTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // -- State --\n\n    IGraphTokenLockManager public manager;\n    uint256 public usedAmount;\n\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    // -- Events --\n\n    event ManagerUpdated(address indexed _oldManager, address indexed _newManager);\n    event TokenDestinationsApproved();\n    event TokenDestinationsRevoked();\n\n    // Initializer\n    function initialize(\n        address _manager,\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        _setManager(_manager);\n    }\n\n    // -- Admin --\n\n    /**\n     * @notice Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function setManager(address _newManager) external onlyOwner {\n        _setManager(_newManager);\n    }\n\n    /**\n     * @dev Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function _setManager(address _newManager) private {\n        require(_newManager != address(0), \"Manager cannot be empty\");\n        require(Address.isContract(_newManager), \"Manager must be a contract\");\n\n        address oldManager = address(manager);\n        manager = IGraphTokenLockManager(_newManager);\n\n        emit ManagerUpdated(oldManager, _newManager);\n    }\n\n    // -- Beneficiary --\n\n    /**\n     * @notice Approves protocol access of the tokens managed by this contract\n     * @dev Approves all token destinations registered in the manager to pull tokens\n     */\n    function approveProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            token.safeApprove(dstList[i], MAX_UINT256);\n        }\n        emit TokenDestinationsApproved();\n    }\n\n    /**\n     * @notice Revokes protocol access of the tokens managed by this contract\n     * @dev Revokes approval to all token destinations in the manager to pull tokens\n     */\n    function revokeProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            token.safeApprove(dstList[i], 0);\n        }\n        emit TokenDestinationsRevoked();\n    }\n\n    /**\n     * @notice Forward authorized contract calls to protocol contracts\n     * @dev Fallback function can be called by the beneficiary only if function call is allowed\n     */\n    fallback() external payable {\n        // Only beneficiary can forward calls\n        require(msg.sender == beneficiary, \"Unauthorized caller\");\n\n        // Function call validation\n        address _target = manager.getAuthFunctionCallTarget(msg.sig);\n        require(_target != address(0), \"Unauthorized function\");\n\n        uint256 oldBalance = currentBalance();\n\n        // Call function with data\n        Address.functionCall(_target, msg.data);\n\n        // Tracked used tokens in the protocol\n        // We do this check after balances were updated by the forwarded call\n        // Check is only enforced for revocable contracts to save some gas\n        if (revocable == Revocability.Enabled) {\n            // Track contract balance change\n            uint256 newBalance = currentBalance();\n            if (newBalance < oldBalance) {\n                // Outflow\n                uint256 diff = oldBalance.sub(newBalance);\n                usedAmount = usedAmount.add(diff);\n            } else {\n                // Inflow: We can receive profits from the protocol, that could make usedAmount to\n                // underflow. We set it to zero in that case.\n                uint256 diff = newBalance.sub(oldBalance);\n                usedAmount = (diff >= usedAmount) ? 0 : usedAmount.sub(diff);\n            }\n            require(usedAmount <= vestedAmount(), \"Cannot use more tokens than vested amount\");\n        }\n    }\n}\n"
    },
    "contracts/GraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./Ownable.sol\";\nimport \"./MathUtils.sol\";\nimport \"./IGraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLock\n * @notice Contract that manages an unlocking schedule of tokens.\n * @dev The contract lock manage a number of tokens deposited into the contract to ensure that\n * they can only be released under certain time conditions.\n *\n * This contract implements a release scheduled based on periods and tokens are released in steps\n * after each period ends. It can be configured with one period in which case it is like a plain TimeLock.\n * It also supports revocation to be used for vesting schedules.\n *\n * The contract supports receiving extra funds than the managed tokens ones that can be\n * withdrawn by the beneficiary at any time.\n *\n * A releaseStartTime parameter is included to override the default release schedule and\n * perform the first release on the configured time. After that it will continue with the\n * default schedule.\n */\nabstract contract GraphTokenLock is Ownable, IGraphTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MIN_PERIOD = 1;\n\n    // -- State --\n\n    IERC20 public token;\n    address public beneficiary;\n\n    // Configuration\n\n    // Amount of tokens managed by the contract schedule\n    uint256 public managedAmount;\n\n    uint256 public startTime; // Start datetime (in unixtimestamp)\n    uint256 public endTime; // Datetime after all funds are fully vested/unlocked (in unixtimestamp)\n    uint256 public periods; // Number of vesting/release periods\n\n    // First release date for tokens (in unixtimestamp)\n    // If set, no tokens will be released before releaseStartTime ignoring\n    // the amount to release each period\n    uint256 public releaseStartTime;\n    // A cliff set a date to which a beneficiary needs to get to vest\n    // all preceding periods\n    uint256 public vestingCliffTime;\n    Revocability public revocable; // Whether to use vesting for locked funds\n\n    // State\n\n    bool public isRevoked;\n    bool public isInitialized;\n    uint256 public releasedAmount;\n\n    // -- Events --\n\n    event TokensReleased(address indexed beneficiary, uint256 amount);\n    event TokensWithdrawn(address indexed beneficiary, uint256 amount);\n    event TokensRevoked(address indexed beneficiary, uint256 amount);\n\n    /**\n     * @dev Only allow calls from the beneficiary of the contract\n     */\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"!auth\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _vestingCliffTime Override time for when the vesting start\n     * @param _revocable Whether the contract is revocable\n     */\n    function _initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) internal {\n        require(!isInitialized, \"Already initialized\");\n        require(_owner != address(0), \"Owner cannot be zero\");\n        require(_beneficiary != address(0), \"Beneficiary cannot be zero\");\n        require(_token != address(0), \"Token cannot be zero\");\n        require(_managedAmount > 0, \"Managed tokens cannot be zero\");\n        require(_startTime != 0, \"Start time must be set\");\n        require(_startTime < _endTime, \"Start time > end time\");\n        require(_periods >= MIN_PERIOD, \"Periods cannot be below minimum\");\n        require(_revocable != Revocability.NotSet, \"Must set a revocability option\");\n        require(_releaseStartTime < _endTime, \"Release start time must be before end time\");\n        require(_vestingCliffTime < _endTime, \"Cliff time must be before end time\");\n\n        isInitialized = true;\n\n        Ownable.initialize(_owner);\n        beneficiary = _beneficiary;\n        token = IERC20(_token);\n\n        managedAmount = _managedAmount;\n\n        startTime = _startTime;\n        endTime = _endTime;\n        periods = _periods;\n\n        // Optionals\n        releaseStartTime = _releaseStartTime;\n        vestingCliffTime = _vestingCliffTime;\n        revocable = _revocable;\n    }\n\n    // -- Balances --\n\n    /**\n     * @notice Returns the amount of tokens currently held by the contract\n     * @return Tokens held in the contract\n     */\n    function currentBalance() public override view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    // -- Time & Periods --\n\n    /**\n     * @notice Returns the current block timestamp\n     * @return Current block timestamp\n     */\n    function currentTime() public override view returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Gets duration of contract from start to end in seconds\n     * @return Amount of seconds from contract startTime to endTime\n     */\n    function duration() public override view returns (uint256) {\n        return endTime.sub(startTime);\n    }\n\n    /**\n     * @notice Gets time elapsed since the start of the contract\n     * @dev Returns zero if called before conctract starTime\n     * @return Seconds elapsed from contract startTime\n     */\n    function sinceStartTime() public override view returns (uint256) {\n        uint256 current = currentTime();\n        if (current <= startTime) {\n            return 0;\n        }\n        return current.sub(startTime);\n    }\n\n    /**\n     * @notice Returns amount available to be released after each period according to schedule\n     * @return Amount of tokens available after each period\n     */\n    function amountPerPeriod() public override view returns (uint256) {\n        return managedAmount.div(periods);\n    }\n\n    /**\n     * @notice Returns the duration of each period in seconds\n     * @return Duration of each period in seconds\n     */\n    function periodDuration() public override view returns (uint256) {\n        return duration().div(periods);\n    }\n\n    /**\n     * @notice Gets the current period based on the schedule\n     * @return A number that represents the current period\n     */\n    function currentPeriod() public override view returns (uint256) {\n        return sinceStartTime().div(periodDuration()).add(MIN_PERIOD);\n    }\n\n    /**\n     * @notice Gets the number of periods that passed since the first period\n     * @return A number of periods that passed since the schedule started\n     */\n    function passedPeriods() public override view returns (uint256) {\n        return currentPeriod().sub(MIN_PERIOD);\n    }\n\n    // -- Locking & Release Schedule --\n\n    /**\n     * @notice Gets the currently available token according to the schedule\n     * @dev Implements the step-by-step schedule based on periods for available tokens\n     * @return Amount of tokens available according to the schedule\n     */\n    function availableAmount() public override view returns (uint256) {\n        uint256 current = currentTime();\n\n        // Before contract start no funds are available\n        if (current < startTime) {\n            return 0;\n        }\n\n        // After contract ended all funds are available\n        if (current > endTime) {\n            return managedAmount;\n        }\n\n        // Get available amount based on period\n        return passedPeriods().mul(amountPerPeriod());\n    }\n\n    /**\n     * @notice Gets the amount of currently vested tokens\n     * @dev Similar to available amount, but is fully vested when contract is non-revocable\n     * @return Amount of tokens already vested\n     */\n    function vestedAmount() public override view returns (uint256) {\n        // If non-revocable it is fully vested\n        if (revocable == Revocability.Disabled) {\n            return managedAmount;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        if (vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        return availableAmount();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule and takes into account already released tokens\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public override view returns (uint256) {\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        uint256 releasable = availableAmount().sub(releasedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Gets the outstanding amount yet to be released based on the whole contract lifetime\n     * @dev Does not consider schedule but just global amounts tracked\n     * @return Amount of outstanding tokens for the lifetime of the contract\n     */\n    function totalOutstandingAmount() public override view returns (uint256) {\n        return managedAmount.sub(releasedAmount);\n    }\n\n    /**\n     * @notice Gets surplus amount in the contract based on outstanding amount to release\n     * @dev All funds over outstanding amount is considered surplus that can be withdrawn by beneficiary\n     * @return Amount of tokens considered as surplus\n     */\n    function surplusAmount() public override view returns (uint256) {\n        uint256 balance = currentBalance();\n        uint256 outstandingAmount = totalOutstandingAmount();\n        if (balance > outstandingAmount) {\n            return balance.sub(outstandingAmount);\n        }\n        return 0;\n    }\n\n    // -- Value Transfer --\n\n    /**\n     * @notice Releases tokens based on the configured schedule\n     * @dev All available releasable tokens are transferred to beneficiary\n     */\n    function release() external override onlyBeneficiary {\n        uint256 amountToRelease = releasableAmount();\n        require(amountToRelease > 0, \"No available releasable amount\");\n\n        releasedAmount = releasedAmount.add(amountToRelease);\n\n        token.safeTransfer(beneficiary, amountToRelease);\n\n        emit TokensReleased(beneficiary, amountToRelease);\n    }\n\n    /**\n     * @notice Withdraws surplus, unmanaged tokens from the contract\n     * @dev Tokens in the contract over outstanding amount are considered as surplus\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdrawSurplus(uint256 _amount) external override onlyBeneficiary {\n        require(_amount > 0, \"Amount cannot be zero\");\n        require(surplusAmount() >= _amount, \"Amount requested > surplus available\");\n\n        token.safeTransfer(beneficiary, _amount);\n\n        emit TokensWithdrawn(beneficiary, _amount);\n    }\n\n    /**\n     * @notice Revokes a vesting schedule and return the unvested tokens to the owner\n     * @dev Vesting schedule is always calculated based on managed tokens\n     */\n    function revoke() external override onlyOwner {\n        require(revocable == Revocability.Enabled, \"Contract is non-revocable\");\n        require(isRevoked == false, \"Already revoked\");\n\n        uint256 unvestedAmount = managedAmount.sub(vestedAmount());\n        require(unvestedAmount > 0, \"No available unvested amount\");\n\n        isRevoked = true;\n\n        token.safeTransfer(owner(), unvestedAmount);\n\n        emit TokensRevoked(beneficiary, unvestedAmount);\n    }\n}\n"
    },
    "contracts/IGraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IGraphTokenLock.sol\";\n\ninterface IGraphTokenLockManager {\n    // -- Factory --\n\n    function setMasterCopy(address _masterCopy) external;\n\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IGraphTokenLock.Revocability _revocable\n    ) external;\n\n    // -- Funds Management --\n\n    function token() external returns (IERC20);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    // -- Allowed Funds Destinations --\n\n    function addTokenDestination(address _dst) external;\n\n    function removeTokenDestination(address _dst) external;\n\n    function isTokenDestination(address _dst) external view returns (bool);\n\n    function getTokenDestinations() external view returns (address[] memory);\n\n    // -- Function Call Authorization --\n\n    function setAuthFunctionCall(string calldata _signature, address _target) external;\n\n    function unsetAuthFunctionCall(string calldata _signature) external;\n\n    function setAuthFunctionCallMany(string[] calldata _signatures, address[] calldata _targets) external;\n\n    function getAuthFunctionCallTarget(bytes4 _sigHash) external view returns (address);\n\n    function isAuthFunctionCall(bytes4 _sigHash) external view returns (bool);\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The owner account will be passed on initialization of the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address owner) internal {\n        _owner = owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nlibrary MathUtils {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/IGraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IGraphTokenLock {\n    enum Revocability { NotSet, Enabled, Disabled }\n\n    // -- Balances --\n\n    function currentBalance() external view returns (uint256);\n\n    // -- Time & Periods --\n\n    function currentTime() external view returns (uint256);\n\n    function duration() external view returns (uint256);\n\n    function sinceStartTime() external view returns (uint256);\n\n    function amountPerPeriod() external view returns (uint256);\n\n    function periodDuration() external view returns (uint256);\n\n    function currentPeriod() external view returns (uint256);\n\n    function passedPeriods() external view returns (uint256);\n\n    // -- Locking & Release Schedule --\n\n    function availableAmount() external view returns (uint256);\n\n    function vestedAmount() external view returns (uint256);\n\n    function releasableAmount() external view returns (uint256);\n\n    function totalOutstandingAmount() external view returns (uint256);\n\n    function surplusAmount() external view returns (uint256);\n\n    // -- Value Transfer --\n\n    function release() external;\n\n    function withdrawSurplus(uint256 _amount) external;\n\n    function revoke() external;\n}\n"
    },
    "contracts/StakingMock.sol": {
      "content": "pragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./Stakes.sol\";\n\ncontract StakingMock {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    // -- State --\n\n    uint256 public minimumIndexerStake = 100e18;\n    uint256 public thawingPeriod = 10; // 10 blocks\n    IERC20 public token;\n\n    // Indexer stakes : indexer => Stake\n    mapping(address => Stakes.Indexer) public stakes;\n\n    /**\n     * @dev Emitted when `indexer` stake `tokens` amount.\n     */\n    event StakeDeposited(address indexed indexer, uint256 tokens);\n\n    /**\n     * @dev Emitted when `indexer` unstaked and locked `tokens` amount `until` block.\n     */\n    event StakeLocked(address indexed indexer, uint256 tokens, uint256 until);\n\n    /**\n     * @dev Emitted when `indexer` withdrew `tokens` staked.\n     */\n    event StakeWithdrawn(address indexed indexer, uint256 tokens);\n\n    // Contract constructor.\n    constructor(IERC20 _token) {\n        require(address(_token) != address(0), \"!token\");\n        token = _token;\n    }\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _tokens Amount of tokens to stake\n     */\n    function stake(uint256 _tokens) external {\n        stakeTo(msg.sender, _tokens);\n    }\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _indexer Address of the indexer\n     * @param _tokens Amount of tokens to stake\n     */\n    function stakeTo(address _indexer, uint256 _tokens) public {\n        require(_tokens > 0, \"!tokens\");\n\n        // Ensure minimum stake\n        require(stakes[_indexer].tokensSecureStake().add(_tokens) >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Transfer tokens to stake from caller to this contract\n        require(token.transferFrom(msg.sender, address(this), _tokens), \"!transfer\");\n\n        // Stake the transferred tokens\n        _stake(_indexer, _tokens);\n    }\n\n    /**\n     * @dev Unstake tokens from the indexer stake, lock them until thawing period expires.\n     * @param _tokens Amount of tokens to unstake\n     */\n    function unstake(uint256 _tokens) external {\n        address indexer = msg.sender;\n        Stakes.Indexer storage indexerStake = stakes[indexer];\n\n        require(_tokens > 0, \"!tokens\");\n        require(indexerStake.hasTokens(), \"!stake\");\n        require(indexerStake.tokensAvailable() >= _tokens, \"!stake-avail\");\n\n        // Ensure minimum stake\n        uint256 newStake = indexerStake.tokensSecureStake().sub(_tokens);\n        require(newStake == 0 || newStake >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Before locking more tokens, withdraw any unlocked ones\n        uint256 tokensToWithdraw = indexerStake.tokensWithdrawable();\n        if (tokensToWithdraw > 0) {\n            _withdraw(indexer);\n        }\n\n        indexerStake.lockTokens(_tokens, thawingPeriod);\n\n        emit StakeLocked(indexer, indexerStake.tokensLocked, indexerStake.tokensLockedUntil);\n    }\n\n    /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     */\n    function withdraw() external {\n        _withdraw(msg.sender);\n    }\n\n    function _stake(address _indexer, uint256 _tokens) internal {\n        // Deposit tokens into the indexer stake\n        Stakes.Indexer storage indexerStake = stakes[_indexer];\n        indexerStake.deposit(_tokens);\n\n        emit StakeDeposited(_indexer, _tokens);\n    }\n\n        /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     * @param _indexer Address of indexer to withdraw funds from\n     */\n    function _withdraw(address _indexer) private {\n        // Get tokens available for withdraw and update balance\n        uint256 tokensToWithdraw = stakes[_indexer].withdrawTokens();\n        require(tokensToWithdraw > 0, \"!tokens\");\n\n        // Return tokens to the indexer\n        require(token.transfer(_indexer, tokensToWithdraw), \"!transfer\");\n\n        emit StakeWithdrawn(_indexer, tokensToWithdraw);\n    }\n}\n"
    },
    "contracts/Stakes.sol": {
      "content": "pragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title A collection of data structures and functions to manage the Indexer Stake state.\n *        Used for low-level state changes, require() conditions should be evaluated\n *        at the caller function scope.\n */\nlibrary Stakes {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    struct Indexer {\n        uint256 tokensStaked; // Tokens on the indexer stake (staked by the indexer)\n        uint256 tokensAllocated; // Tokens used in allocations\n        uint256 tokensLocked; // Tokens locked for withdrawal subject to thawing period\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\n    }\n\n    /**\n     * @dev Deposit tokens to the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to deposit\n     */\n    function deposit(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.add(_tokens);\n    }\n\n    /**\n     * @dev Release tokens from the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to release\n     */\n    function release(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.sub(_tokens);\n    }\n\n    /**\n     * @dev Allocate tokens from the main stack to a SubgraphDeployment.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to allocate\n     */\n    function allocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.add(_tokens);\n    }\n\n    /**\n     * @dev Unallocate tokens from a SubgraphDeployment back to the main stack.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unallocate\n     */\n    function unallocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.sub(_tokens);\n    }\n\n    /**\n     * @dev Lock tokens until a thawing period pass.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _period Period in blocks that need to pass before withdrawal\n     */\n    function lockTokens(\n        Stakes.Indexer storage stake,\n        uint256 _tokens,\n        uint256 _period\n    ) internal {\n        // Take into account period averaging for multiple unstake requests\n        uint256 lockingPeriod = _period;\n        if (stake.tokensLocked > 0) {\n            lockingPeriod = stake.getLockingPeriod(_tokens, _period);\n        }\n\n        // Update balances\n        stake.tokensLocked = stake.tokensLocked.add(_tokens);\n        stake.tokensLockedUntil = block.number.add(lockingPeriod);\n    }\n\n    /**\n     * @dev Unlock tokens.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unkock\n     */\n    function unlockTokens(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensLocked = stake.tokensLocked.sub(_tokens);\n        if (stake.tokensLocked == 0) {\n            stake.tokensLockedUntil = 0;\n        }\n    }\n\n    /**\n     * @dev Take all tokens out from the locked stake for withdrawal.\n     * @param stake Stake data\n     * @return Amount of tokens being withdrawn\n     */\n    function withdrawTokens(Stakes.Indexer storage stake) internal returns (uint256) {\n        // Calculate tokens that can be released\n        uint256 tokensToWithdraw = stake.tokensWithdrawable();\n\n        if (tokensToWithdraw > 0) {\n            // Reset locked tokens\n            stake.unlockTokens(tokensToWithdraw);\n\n            // Decrease indexer stake\n            stake.release(tokensToWithdraw);\n        }\n\n        return tokensToWithdraw;\n    }\n\n    /**\n     * @dev Get the locking period of the tokens to unstake.\n     * If already unstaked before calculate the weighted average.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _thawingPeriod Period in blocks that need to pass before withdrawal\n     * @return True if staked\n     */\n    function getLockingPeriod(\n        Stakes.Indexer memory stake,\n        uint256 _tokens,\n        uint256 _thawingPeriod\n    ) internal view returns (uint256) {\n        uint256 blockNum = block.number;\n        uint256 periodA = (stake.tokensLockedUntil > blockNum) ? stake.tokensLockedUntil.sub(blockNum) : 0;\n        uint256 periodB = _thawingPeriod;\n        uint256 stakeA = stake.tokensLocked;\n        uint256 stakeB = _tokens;\n        return periodA.mul(stakeA).add(periodB.mul(stakeB)).div(stakeA.add(stakeB));\n    }\n\n    /**\n     * @dev Return true if there are tokens staked by the Indexer.\n     * @param stake Stake data\n     * @return True if staked\n     */\n    function hasTokens(Stakes.Indexer memory stake) internal pure returns (bool) {\n        return stake.tokensStaked > 0;\n    }\n\n    /**\n     * @dev Return the amount of tokens used in allocations and locked for withdrawal.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensUsed(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAllocated.add(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Return the amount of tokens staked not considering the ones that are already going\n     * through the thawing period or are ready for withdrawal. We call it secure stake because\n     * it is not subject to change by a withdraw call from the indexer.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensSecureStake(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensStaked.sub(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for any purpose.\n     * Any token that is allocated cannot be used as well as tokens that are going through the\n     * thawing period or are withdrawable\n     * Calc: tokensStaked - tokensAllocated - tokensLocked\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensAvailable(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAvailableWithDelegation(0);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for allocations.\n     * This function accepts a parameter for extra delegated capacity that takes into\n     * account delegated tokens\n     * @param stake Stake data\n     * @param _delegatedCapacity Amount of tokens used from delegators to calculate availability\n     * @return Token amount\n     */\n    function tokensAvailableWithDelegation(Stakes.Indexer memory stake, uint256 _delegatedCapacity)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 tokensCapacity = stake.tokensStaked.add(_delegatedCapacity);\n        uint256 _tokensUsed = stake.tokensUsed();\n        // If more tokens are used than the current capacity, the indexer is overallocated.\n        // This means the indexer doesn't have available capacity to create new allocations.\n        // We can reach this state when the indexer has funds allocated and then any\n        // of these conditions happen:\n        // - The delegationCapacity ratio is reduced.\n        // - The indexer stake is slashed.\n        // - A delegator removes enough stake.\n        if (_tokensUsed > tokensCapacity) {\n            // Indexer stake is over allocated: return 0 to avoid stake to be used until\n            // the overallocation is restored by staking more tokens, unallocating tokens\n            // or using more delegated funds\n            return 0;\n        }\n        return tokensCapacity.sub(_tokensUsed);\n    }\n\n    /**\n     * @dev Tokens available for withdrawal after thawing period.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensWithdrawable(Stakes.Indexer memory stake) internal view returns (uint256) {\n        // No tokens to withdraw before locking period\n        if (stake.tokensLockedUntil == 0 || block.number < stake.tokensLockedUntil) {\n            return 0;\n        }\n        return stake.tokensLocked;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/GraphTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Graph Token Mock\n */\ncontract GraphTokenMock is Ownable, ERC20 {\n    /**\n     * @dev Contract Constructor.\n     * @param _initialSupply Initial supply\n     */\n    constructor(uint256 _initialSupply, address _mintTo) ERC20(\"Graph Token Mock\", \"GRT-Mock\") {\n        // Deploy to mint address\n        _mint(_mintTo, _initialSupply);\n    }\n}\n"
    },
    "contracts/MinimalProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\n\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-sdk/blob/v2.5.0/packages/lib/contracts/upgradeability/ProxyFactory.sol\n// Based on https://eips.ethereum.org/EIPS/eip-1167\ncontract MinimalProxyFactory is Ownable {\n    // -- Events --\n\n    event ProxyCreated(address indexed proxy);\n\n    /**\n     * @notice Gets the deterministic CREATE2 address for MinimalProxy with a particular implementation\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @return Address of the counterfactual MinimalProxy\n     */\n    function getDeploymentAddress(bytes32 _salt, address _implementation) external view returns (address) {\n        return Create2.computeAddress(_salt, keccak256(_getContractCreationCode(_implementation)), address(this));\n    }\n\n    /**\n     * @notice Deploys a MinimalProxy with CREATE2\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @param _data Bytes with the initializer call\n     * @return Address of the deployed MinimalProxy\n     */\n    function _deployProxy2(\n        bytes32 _salt,\n        address _implementation,\n        bytes memory _data\n    ) internal returns (address) {\n        address proxyAddress = Create2.deploy(0, _salt, _getContractCreationCode(_implementation));\n\n        emit ProxyCreated(proxyAddress);\n\n        // Call function with data\n        if (_data.length > 0) {\n            Address.functionCall(proxyAddress, _data);\n        }\n\n        return proxyAddress;\n    }\n\n    /**\n     * @notice Gets the MinimalProxy bytecode\n     * @param _implementation Address of the proxy target implementation\n     * @return MinimalProxy bytecode\n     */\n    function _getContractCreationCode(address _implementation) internal pure returns (bytes memory) {\n        bytes10 creation = 0x3d602d80600a3d3981f3;\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\n        bytes20 targetBytes = bytes20(_implementation);\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint256(_data));\n    }\n}\n"
    },
    "contracts/GraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\n\nimport \"./MinimalProxyFactory.sol\";\nimport \"./IGraphTokenLockManager.sol\";\n\n/**\n * @title GraphTokenLockManager\n * @notice This contract manages a list of authorized function calls and targets that can be called\n * by any TokenLockWallet contract and it is a factory of TokenLockWallet contracts.\n *\n * This contract receives funds to make the process of creating TokenLockWallet contracts\n * easier by distributing them the initial tokens to be managed.\n *\n * The owner can setup a list of token destinations that will be used by TokenLock contracts to\n * approve the pulling of funds, this way in can be guaranteed that only protocol contracts\n * will manipulate users funds.\n */\ncontract GraphTokenLockManager is MinimalProxyFactory, IGraphTokenLockManager {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // -- State --\n\n    mapping(bytes4 => address) public authFnCalls;\n    EnumerableSet.AddressSet private _tokenDestinations;\n\n    address public masterCopy;\n    IERC20 private _token;\n\n    // -- Events --\n\n    event MasterCopyUpdated(address indexed masterCopy);\n    event TokenLockCreated(\n        address indexed contractAddress,\n        bytes32 indexed initHash,\n        address indexed beneficiary,\n        address token,\n        uint256 managedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 periods,\n        uint256 releaseStartTime,\n        uint256 vestingCliffTime,\n        IGraphTokenLock.Revocability revocable\n    );\n\n    event TokensDeposited(address indexed sender, uint256 amount);\n    event TokensWithdrawn(address indexed sender, uint256 amount);\n\n    event FunctionCallAuth(address indexed caller, bytes4 indexed sigHash, address indexed target, string signature);\n    event TokenDestinationAllowed(address indexed dst, bool allowed);\n\n    /**\n     * Constructor.\n     * @param _graphToken Token to use for deposits and withdrawals\n     * @param _masterCopy Address of the master copy to use to clone proxies\n     */\n    constructor(IERC20 _graphToken, address _masterCopy) {\n        require(address(_graphToken) != address(0), \"Token cannot be zero\");\n        _token = _graphToken;\n        setMasterCopy(_masterCopy);\n    }\n\n    // -- Factory --\n\n    /**\n     * @notice Sets the masterCopy bytecode to use to create clones of TokenLock contracts\n     * @param _masterCopy Address of contract bytecode to factory clone\n     */\n    function setMasterCopy(address _masterCopy) public override onlyOwner {\n        require(_masterCopy != address(0), \"MasterCopy cannot be zero\");\n        masterCopy = _masterCopy;\n        emit MasterCopyUpdated(_masterCopy);\n    }\n\n    /**\n     * @notice Creates and fund a new token lock wallet using a minimum proxy\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _revocable Whether the contract is revocable\n     */\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IGraphTokenLock.Revocability _revocable\n    ) external override onlyOwner {\n        require(_token.balanceOf(address(this)) >= _managedAmount, \"Not enough tokens to create lock\");\n\n        // Create contract using a minimal proxy and call initializer\n        bytes memory initializer = abi.encodeWithSignature(\n            \"initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8)\",\n            address(this),\n            _owner,\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        address contractAddress = _deployProxy2(keccak256(initializer), masterCopy, initializer);\n\n        // Send managed amount to the created contract\n        _token.safeTransfer(contractAddress, _managedAmount);\n\n        emit TokenLockCreated(\n            contractAddress,\n            keccak256(initializer),\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n\n    // -- Funds Management --\n\n    /**\n     * @notice Gets the GRT token address\n     * @return Token used for transfers and approvals\n     */\n    function token() external view override returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @notice Deposits tokens into the contract\n     * @dev Even if the ERC20 token can be transferred directly to the contract\n     * this function provide a safe interface to do the transfer and avoid mistakes\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount) external override {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraws tokens from the contract\n     * @dev Escape hatch in case of mistakes or to recover remaining funds\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external override onlyOwner {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransfer(msg.sender, _amount);\n        emit TokensWithdrawn(msg.sender, _amount);\n    }\n\n    // -- Token Destinations --\n\n    /**\n     * @notice Adds an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function addTokenDestination(address _dst) external override onlyOwner {\n        require(_dst != address(0), \"Destination cannot be zero\");\n        require(_tokenDestinations.add(_dst), \"Destination already added\");\n        emit TokenDestinationAllowed(_dst, true);\n    }\n\n    /**\n     * @notice Removes an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function removeTokenDestination(address _dst) external override onlyOwner {\n        require(_tokenDestinations.remove(_dst), \"Destination already removed\");\n        emit TokenDestinationAllowed(_dst, false);\n    }\n\n    /**\n     * @notice Returns True if the address is authorized to be a destination of tokens\n     * @param _dst Destination address\n     * @return True if authorized\n     */\n    function isTokenDestination(address _dst) external view override returns (bool) {\n        return _tokenDestinations.contains(_dst);\n    }\n\n    /**\n     * @notice Returns an array of authorized destination addresses\n     * @return Array of addresses authorized to pull funds from a token lock\n     */\n    function getTokenDestinations() external view override returns (address[] memory) {\n        address[] memory dstList = new address[](_tokenDestinations.length());\n        for (uint256 i = 0; i < _tokenDestinations.length(); i++) {\n            dstList[i] = _tokenDestinations.at(i);\n        }\n        return dstList;\n    }\n\n    // -- Function Call Authorization --\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function setAuthFunctionCall(string calldata _signature, address _target) external override onlyOwner {\n        _setAuthFunctionCall(_signature, _target);\n    }\n\n    /**\n     * @notice Unsets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     */\n    function unsetAuthFunctionCall(string calldata _signature) external override onlyOwner {\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = address(0);\n\n        emit FunctionCallAuth(msg.sender, sigHash, address(0), _signature);\n    }\n\n    /**\n     * @notice Sets an authorized function call to target in bulk\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signatures Function signatures\n     * @param _targets Address of the destination contract to call\n     */\n    function setAuthFunctionCallMany(string[] calldata _signatures, address[] calldata _targets)\n        external\n        override\n        onlyOwner\n    {\n        require(_signatures.length == _targets.length, \"Array length mismatch\");\n\n        for (uint256 i = 0; i < _signatures.length; i++) {\n            _setAuthFunctionCall(_signatures[i], _targets[i]);\n        }\n    }\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @dev Function signatures of Graph Protocol contracts to be used are known ahead of time\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function _setAuthFunctionCall(string calldata _signature, address _target) internal {\n        require(_target != address(this), \"Target must be other contract\");\n        require(Address.isContract(_target), \"Target must be a contract\");\n\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = _target;\n\n        emit FunctionCallAuth(msg.sender, sigHash, _target, _signature);\n    }\n\n    /**\n     * @notice Gets the target contract to call for a particular function signature\n     * @param _sigHash Function signature hash\n     * @return Address of the target contract where to send the call\n     */\n    function getAuthFunctionCallTarget(bytes4 _sigHash) public view override returns (address) {\n        return authFnCalls[_sigHash];\n    }\n\n    /**\n     * @notice Returns true if the function call is authorized\n     * @param _sigHash Function signature hash\n     * @return True if authorized\n     */\n    function isAuthFunctionCall(bytes4 _sigHash) external view override returns (bool) {\n        return getAuthFunctionCallTarget(_sigHash) != address(0);\n    }\n\n    /**\n     * @dev Converts a function signature string to 4-bytes hash\n     * @param _signature Function signature string\n     * @return Function signature hash\n     */\n    function _toFunctionSigHash(string calldata _signature) internal pure returns (bytes4) {\n        return _convertToBytes4(abi.encodeWithSignature(_signature));\n    }\n\n    /**\n     * @dev Converts function signature bytes to function signature hash (bytes4)\n     * @param _signature Function signature\n     * @return Function signature in bytes4\n     */\n    function _convertToBytes4(bytes memory _signature) internal pure returns (bytes4) {\n        require(_signature.length == 4, \"Invalid method signature\");\n        bytes4 sigHash;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            sigHash := mload(add(_signature, 32))\n        }\n        return sigHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/GraphTokenLockSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"./GraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLockSimple\n * @notice This contract is the concrete simple implementation built on top of the base\n * GraphTokenLock functionality for use when we only need the token lock schedule\n * features but no interaction with the network.\n * \n * This contract is designed to be deployed without the use of a TokenManager.\n */\ncontract GraphTokenLockSimple is GraphTokenLock {\n    // Constructor\n    constructor() {\n        Ownable.initialize(msg.sender);\n    }\n\n    // Initializer\n    function initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external onlyOwner {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}