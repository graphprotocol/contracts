{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/arbitrum/ITokenGateway.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2020, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Originally copied from:\n * https://github.com/OffchainLabs/arbitrum/tree/e3a6307ad8a2dc2cad35728a2a9908cfd8dd8ef9/packages/arb-bridge-peripherals\n *\n * MODIFIED from Offchain Labs' implementation:\n * - Changed solidity version to 0.7.6 (pablo@edgeandnode.com)\n *\n */\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\ninterface ITokenGateway {\n    /// @notice event deprecated in favor of DepositInitiated and WithdrawalInitiated\n    // event OutboundTransferInitiated(\n    //     address token,\n    //     address indexed _from,\n    //     address indexed _to,\n    //     uint256 indexed _transferId,\n    //     uint256 _amount,\n    //     bytes _data\n    // );\n\n    /// @notice event deprecated in favor of DepositFinalized and WithdrawalFinalized\n    // event InboundTransferFinalized(\n    //     address token,\n    //     address indexed _from,\n    //     address indexed _to,\n    //     uint256 indexed _transferId,\n    //     uint256 _amount,\n    //     bytes _data\n    // );\n\n    function outboundTransfer(\n        address _token,\n        address _to,\n        uint256 _amount,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        bytes calldata _data\n    ) external payable returns (bytes memory);\n\n    function finalizeInboundTransfer(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external payable;\n\n    /**\n     * @notice Calculate the address used when bridging an ERC20 token\n     * @dev the L1 and L2 address oracles may not always be in sync.\n     * For example, a custom token may have been registered but not deployed or the contract self destructed.\n     * @param l1ERC20 address of L1 token\n     * @return L2 address of a bridged ERC20 token\n     */\n    function calculateL2TokenAddress(address l1ERC20) external view returns (address);\n}\n"
    },
    "contracts/GraphTokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/**\n * @title GraphTokenDistributor\n * @dev Contract that allows distribution of tokens to multiple beneficiaries.\n * The contract accept deposits in the configured token by anyone.\n * The owner can setup the desired distribution by setting the amount of tokens\n * assigned to each beneficiary account.\n * Beneficiaries claim for their allocated tokens.\n * Only the owner can withdraw tokens from this contract without limitations.\n * For the distribution to work this contract must be unlocked by the owner.\n */\ncontract GraphTokenDistributor is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // -- State --\n\n    bool public locked;\n    mapping(address => uint256) public beneficiaries;\n\n    IERC20 public token;\n\n    // -- Events --\n\n    event BeneficiaryUpdated(address indexed beneficiary, uint256 amount);\n    event TokensDeposited(address indexed sender, uint256 amount);\n    event TokensWithdrawn(address indexed sender, uint256 amount);\n    event TokensClaimed(address indexed beneficiary, address to, uint256 amount);\n    event LockUpdated(bool locked);\n\n    modifier whenNotLocked() {\n        require(locked == false, \"Distributor: Claim is locked\");\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param _token Token to use for deposits and withdrawals\n     */\n    constructor(IERC20 _token) {\n        token = _token;\n        locked = true;\n    }\n\n    /**\n     * Deposit tokens into the contract.\n     * Even if the ERC20 token can be transferred directly to the contract\n     * this function provide a safe interface to do the transfer and avoid mistakes\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount) external {\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    // -- Admin functions --\n\n    /**\n     * Add token balance available for account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function addBeneficiaryTokens(address _account, uint256 _amount) external onlyOwner {\n        _setBeneficiaryTokens(_account, beneficiaries[_account].add(_amount));\n    }\n\n    /**\n     * Add token balance available for multiple accounts.\n     * @param _accounts Addresses to assign tokens to\n     * @param _amounts Amounts of tokens to assign to beneficiary\n     */\n    function addBeneficiaryTokensMulti(address[] calldata _accounts, uint256[] calldata _amounts) external onlyOwner {\n        require(_accounts.length == _amounts.length, \"Distributor: !length\");\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _setBeneficiaryTokens(_accounts[i], beneficiaries[_accounts[i]].add(_amounts[i]));\n        }\n    }\n\n    /**\n     * Remove token balance available for account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function subBeneficiaryTokens(address _account, uint256 _amount) external onlyOwner {\n        _setBeneficiaryTokens(_account, beneficiaries[_account].sub(_amount));\n    }\n\n    /**\n     * Remove token balance available for multiple accounts.\n     * @param _accounts Addresses to assign tokens to\n     * @param _amounts Amounts of tokens to assign to beneficiary\n     */\n    function subBeneficiaryTokensMulti(address[] calldata _accounts, uint256[] calldata _amounts) external onlyOwner {\n        require(_accounts.length == _amounts.length, \"Distributor: !length\");\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _setBeneficiaryTokens(_accounts[i], beneficiaries[_accounts[i]].sub(_amounts[i]));\n        }\n    }\n\n    /**\n     * Set amount of tokens available for beneficiary account.\n     * @param _account Address to assign tokens to\n     * @param _amount Amount of tokens to assign to beneficiary\n     */\n    function _setBeneficiaryTokens(address _account, uint256 _amount) private {\n        require(_account != address(0), \"Distributor: !account\");\n\n        beneficiaries[_account] = _amount;\n        emit BeneficiaryUpdated(_account, _amount);\n    }\n\n    /**\n     * Set locked withdrawals.\n     * @param _locked True to lock withdrawals\n     */\n    function setLocked(bool _locked) external onlyOwner {\n        locked = _locked;\n        emit LockUpdated(_locked);\n    }\n\n    /**\n     * Withdraw tokens from the contract. This function is included as\n     * a escape hatch in case of mistakes or to recover remaining funds.\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external onlyOwner {\n        token.safeTransfer(msg.sender, _amount);\n        emit TokensWithdrawn(msg.sender, _amount);\n    }\n\n    // -- Beneficiary functions --\n\n    /**\n     * Claim tokens and send to caller.\n     */\n    function claim() external whenNotLocked {\n        claimTo(msg.sender);\n    }\n\n    /**\n     * Claim tokens and send to address.\n     * @param _to Address where to send tokens\n     */\n    function claimTo(address _to) public whenNotLocked {\n        uint256 claimableTokens = beneficiaries[msg.sender];\n        require(claimableTokens > 0, \"Distributor: Unavailable funds\");\n\n        _setBeneficiaryTokens(msg.sender, 0);\n\n        token.safeTransfer(_to, claimableTokens);\n        emit TokensClaimed(msg.sender, _to, claimableTokens);\n    }\n}\n"
    },
    "contracts/GraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport { Ownable as OwnableInitializable } from \"./Ownable.sol\";\nimport \"./MathUtils.sol\";\nimport \"./IGraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLock\n * @notice Contract that manages an unlocking schedule of tokens.\n * @dev The contract lock manage a number of tokens deposited into the contract to ensure that\n * they can only be released under certain time conditions.\n *\n * This contract implements a release scheduled based on periods and tokens are released in steps\n * after each period ends. It can be configured with one period in which case it is like a plain TimeLock.\n * It also supports revocation to be used for vesting schedules.\n *\n * The contract supports receiving extra funds than the managed tokens ones that can be\n * withdrawn by the beneficiary at any time.\n *\n * A releaseStartTime parameter is included to override the default release schedule and\n * perform the first release on the configured time. After that it will continue with the\n * default schedule.\n */\nabstract contract GraphTokenLock is OwnableInitializable, IGraphTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MIN_PERIOD = 1;\n\n    // -- State --\n\n    IERC20 public token;\n    address public beneficiary;\n\n    // Configuration\n\n    // Amount of tokens managed by the contract schedule\n    uint256 public managedAmount;\n\n    uint256 public startTime; // Start datetime (in unixtimestamp)\n    uint256 public endTime; // Datetime after all funds are fully vested/unlocked (in unixtimestamp)\n    uint256 public periods; // Number of vesting/release periods\n\n    // First release date for tokens (in unixtimestamp)\n    // If set, no tokens will be released before releaseStartTime ignoring\n    // the amount to release each period\n    uint256 public releaseStartTime;\n    // A cliff set a date to which a beneficiary needs to get to vest\n    // all preceding periods\n    uint256 public vestingCliffTime;\n    Revocability public revocable; // Whether to use vesting for locked funds\n\n    // State\n\n    bool public isRevoked;\n    bool public isInitialized;\n    bool public isAccepted;\n    uint256 public releasedAmount;\n    uint256 public revokedAmount;\n\n    // -- Events --\n\n    event TokensReleased(address indexed beneficiary, uint256 amount);\n    event TokensWithdrawn(address indexed beneficiary, uint256 amount);\n    event TokensRevoked(address indexed beneficiary, uint256 amount);\n    event BeneficiaryChanged(address newBeneficiary);\n    event LockAccepted();\n    event LockCanceled();\n\n    /**\n     * @dev Only allow calls from the beneficiary of the contract\n     */\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"!auth\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _vestingCliffTime Override time for when the vesting start\n     * @param _revocable Whether the contract is revocable\n     */\n    function _initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) internal {\n        require(!isInitialized, \"Already initialized\");\n        require(_owner != address(0), \"Owner cannot be zero\");\n        require(_beneficiary != address(0), \"Beneficiary cannot be zero\");\n        require(_token != address(0), \"Token cannot be zero\");\n        require(_managedAmount > 0, \"Managed tokens cannot be zero\");\n        require(_startTime != 0, \"Start time must be set\");\n        require(_startTime < _endTime, \"Start time > end time\");\n        require(_periods >= MIN_PERIOD, \"Periods cannot be below minimum\");\n        require(_revocable != Revocability.NotSet, \"Must set a revocability option\");\n        require(_releaseStartTime < _endTime, \"Release start time must be before end time\");\n        require(_vestingCliffTime < _endTime, \"Cliff time must be before end time\");\n\n        isInitialized = true;\n\n        OwnableInitializable._initialize(_owner);\n        beneficiary = _beneficiary;\n        token = IERC20(_token);\n\n        managedAmount = _managedAmount;\n\n        startTime = _startTime;\n        endTime = _endTime;\n        periods = _periods;\n\n        // Optionals\n        releaseStartTime = _releaseStartTime;\n        vestingCliffTime = _vestingCliffTime;\n        revocable = _revocable;\n    }\n\n    /**\n     * @notice Change the beneficiary of funds managed by the contract\n     * @dev Can only be called by the beneficiary\n     * @param _newBeneficiary Address of the new beneficiary address\n     */\n    function changeBeneficiary(address _newBeneficiary) external onlyBeneficiary {\n        require(_newBeneficiary != address(0), \"Empty beneficiary\");\n        beneficiary = _newBeneficiary;\n        emit BeneficiaryChanged(_newBeneficiary);\n    }\n\n    /**\n     * @notice Beneficiary accepts the lock, the owner cannot retrieve back the tokens\n     * @dev Can only be called by the beneficiary\n     */\n    function acceptLock() external onlyBeneficiary {\n        isAccepted = true;\n        emit LockAccepted();\n    }\n\n    /**\n     * @notice Owner cancel the lock and return the balance in the contract\n     * @dev Can only be called by the owner\n     */\n    function cancelLock() external onlyOwner {\n        require(isAccepted == false, \"Cannot cancel accepted contract\");\n\n        token.safeTransfer(owner(), currentBalance());\n\n        emit LockCanceled();\n    }\n\n    // -- Balances --\n\n    /**\n     * @notice Returns the amount of tokens currently held by the contract\n     * @return Tokens held in the contract\n     */\n    function currentBalance() public view override returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    // -- Time & Periods --\n\n    /**\n     * @notice Returns the current block timestamp\n     * @return Current block timestamp\n     */\n    function currentTime() public view override returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Gets duration of contract from start to end in seconds\n     * @return Amount of seconds from contract startTime to endTime\n     */\n    function duration() public view override returns (uint256) {\n        return endTime.sub(startTime);\n    }\n\n    /**\n     * @notice Gets time elapsed since the start of the contract\n     * @dev Returns zero if called before conctract starTime\n     * @return Seconds elapsed from contract startTime\n     */\n    function sinceStartTime() public view override returns (uint256) {\n        uint256 current = currentTime();\n        if (current <= startTime) {\n            return 0;\n        }\n        return current.sub(startTime);\n    }\n\n    /**\n     * @notice Returns amount available to be released after each period according to schedule\n     * @return Amount of tokens available after each period\n     */\n    function amountPerPeriod() public view override returns (uint256) {\n        return managedAmount.div(periods);\n    }\n\n    /**\n     * @notice Returns the duration of each period in seconds\n     * @return Duration of each period in seconds\n     */\n    function periodDuration() public view override returns (uint256) {\n        return duration().div(periods);\n    }\n\n    /**\n     * @notice Gets the current period based on the schedule\n     * @return A number that represents the current period\n     */\n    function currentPeriod() public view override returns (uint256) {\n        return sinceStartTime().div(periodDuration()).add(MIN_PERIOD);\n    }\n\n    /**\n     * @notice Gets the number of periods that passed since the first period\n     * @return A number of periods that passed since the schedule started\n     */\n    function passedPeriods() public view override returns (uint256) {\n        return currentPeriod().sub(MIN_PERIOD);\n    }\n\n    // -- Locking & Release Schedule --\n\n    /**\n     * @notice Gets the currently available token according to the schedule\n     * @dev Implements the step-by-step schedule based on periods for available tokens\n     * @return Amount of tokens available according to the schedule\n     */\n    function availableAmount() public view override returns (uint256) {\n        uint256 current = currentTime();\n\n        // Before contract start no funds are available\n        if (current < startTime) {\n            return 0;\n        }\n\n        // After contract ended all funds are available\n        if (current > endTime) {\n            return managedAmount;\n        }\n\n        // Get available amount based on period\n        return passedPeriods().mul(amountPerPeriod());\n    }\n\n    /**\n     * @notice Gets the amount of currently vested tokens\n     * @dev Similar to available amount, but is fully vested when contract is non-revocable\n     * @return Amount of tokens already vested\n     */\n    function vestedAmount() public view override returns (uint256) {\n        // If non-revocable it is fully vested\n        if (revocable == Revocability.Disabled) {\n            return managedAmount;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        if (vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        return availableAmount();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule and takes into account already released tokens\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view virtual override returns (uint256) {\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        uint256 releasable = availableAmount().sub(releasedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Gets the outstanding amount yet to be released based on the whole contract lifetime\n     * @dev Does not consider schedule but just global amounts tracked\n     * @return Amount of outstanding tokens for the lifetime of the contract\n     */\n    function totalOutstandingAmount() public view override returns (uint256) {\n        return managedAmount.sub(releasedAmount).sub(revokedAmount);\n    }\n\n    /**\n     * @notice Gets surplus amount in the contract based on outstanding amount to release\n     * @dev All funds over outstanding amount is considered surplus that can be withdrawn by beneficiary.\n     * Note this might not be the correct value for wallets transferred to L2 (i.e. an L2GraphTokenLockWallet), as the released amount will be\n     * skewed, so the beneficiary might have to bridge back to L1 to release the surplus.\n     * @return Amount of tokens considered as surplus\n     */\n    function surplusAmount() public view override returns (uint256) {\n        uint256 balance = currentBalance();\n        uint256 outstandingAmount = totalOutstandingAmount();\n        if (balance > outstandingAmount) {\n            return balance.sub(outstandingAmount);\n        }\n        return 0;\n    }\n\n    // -- Value Transfer --\n\n    /**\n     * @notice Releases tokens based on the configured schedule\n     * @dev All available releasable tokens are transferred to beneficiary\n     */\n    function release() external override onlyBeneficiary {\n        uint256 amountToRelease = releasableAmount();\n        require(amountToRelease > 0, \"No available releasable amount\");\n\n        releasedAmount = releasedAmount.add(amountToRelease);\n\n        token.safeTransfer(beneficiary, amountToRelease);\n\n        emit TokensReleased(beneficiary, amountToRelease);\n    }\n\n    /**\n     * @notice Withdraws surplus, unmanaged tokens from the contract\n     * @dev Tokens in the contract over outstanding amount are considered as surplus\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdrawSurplus(uint256 _amount) external override onlyBeneficiary {\n        require(_amount > 0, \"Amount cannot be zero\");\n        require(surplusAmount() >= _amount, \"Amount requested > surplus available\");\n\n        token.safeTransfer(beneficiary, _amount);\n\n        emit TokensWithdrawn(beneficiary, _amount);\n    }\n\n    /**\n     * @notice Revokes a vesting schedule and return the unvested tokens to the owner\n     * @dev Vesting schedule is always calculated based on managed tokens\n     */\n    function revoke() external override onlyOwner {\n        require(revocable == Revocability.Enabled, \"Contract is non-revocable\");\n        require(isRevoked == false, \"Already revoked\");\n\n        uint256 unvestedAmount = managedAmount.sub(vestedAmount());\n        require(unvestedAmount > 0, \"No available unvested amount\");\n\n        revokedAmount = unvestedAmount;\n        isRevoked = true;\n\n        token.safeTransfer(owner(), unvestedAmount);\n\n        emit TokensRevoked(beneficiary, unvestedAmount);\n    }\n}\n"
    },
    "contracts/GraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./MinimalProxyFactory.sol\";\nimport \"./IGraphTokenLockManager.sol\";\nimport { GraphTokenLockWallet } from \"./GraphTokenLockWallet.sol\";\n\n/**\n * @title GraphTokenLockManager\n * @notice This contract manages a list of authorized function calls and targets that can be called\n * by any TokenLockWallet contract and it is a factory of TokenLockWallet contracts.\n *\n * This contract receives funds to make the process of creating TokenLockWallet contracts\n * easier by distributing them the initial tokens to be managed.\n *\n * The owner can setup a list of token destinations that will be used by TokenLock contracts to\n * approve the pulling of funds, this way in can be guaranteed that only protocol contracts\n * will manipulate users funds.\n */\ncontract GraphTokenLockManager is Ownable, MinimalProxyFactory, IGraphTokenLockManager {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // -- State --\n\n    mapping(bytes4 => address) public authFnCalls;\n    EnumerableSet.AddressSet private _tokenDestinations;\n\n    address public masterCopy;\n    IERC20 internal _token;\n\n    // -- Events --\n\n    event MasterCopyUpdated(address indexed masterCopy);\n    event TokenLockCreated(\n        address indexed contractAddress,\n        bytes32 indexed initHash,\n        address indexed beneficiary,\n        address token,\n        uint256 managedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 periods,\n        uint256 releaseStartTime,\n        uint256 vestingCliffTime,\n        IGraphTokenLock.Revocability revocable\n    );\n\n    event TokensDeposited(address indexed sender, uint256 amount);\n    event TokensWithdrawn(address indexed sender, uint256 amount);\n\n    event FunctionCallAuth(address indexed caller, bytes4 indexed sigHash, address indexed target, string signature);\n    event TokenDestinationAllowed(address indexed dst, bool allowed);\n\n    /**\n     * Constructor.\n     * @param _graphToken Token to use for deposits and withdrawals\n     * @param _masterCopy Address of the master copy to use to clone proxies\n     */\n    constructor(IERC20 _graphToken, address _masterCopy) {\n        require(address(_graphToken) != address(0), \"Token cannot be zero\");\n        _token = _graphToken;\n        setMasterCopy(_masterCopy);\n    }\n\n    // -- Factory --\n\n    /**\n     * @notice Sets the masterCopy bytecode to use to create clones of TokenLock contracts\n     * @param _masterCopy Address of contract bytecode to factory clone\n     */\n    function setMasterCopy(address _masterCopy) public override onlyOwner {\n        require(_masterCopy != address(0), \"MasterCopy cannot be zero\");\n        masterCopy = _masterCopy;\n        emit MasterCopyUpdated(_masterCopy);\n    }\n\n    /**\n     * @notice Creates and fund a new token lock wallet using a minimum proxy\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _revocable Whether the contract is revocable\n     */\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IGraphTokenLock.Revocability _revocable\n    ) external override onlyOwner {\n        require(_token.balanceOf(address(this)) >= _managedAmount, \"Not enough tokens to create lock\");\n\n        // Create contract using a minimal proxy and call initializer\n        bytes memory initializer = abi.encodeWithSelector(\n            GraphTokenLockWallet.initialize.selector,\n            address(this),\n            _owner,\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        address contractAddress = _deployProxy2(keccak256(initializer), masterCopy, initializer);\n\n        // Send managed amount to the created contract\n        _token.safeTransfer(contractAddress, _managedAmount);\n\n        emit TokenLockCreated(\n            contractAddress,\n            keccak256(initializer),\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n\n    // -- Funds Management --\n\n    /**\n     * @notice Gets the GRT token address\n     * @return Token used for transfers and approvals\n     */\n    function token() external view override returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @notice Deposits tokens into the contract\n     * @dev Even if the ERC20 token can be transferred directly to the contract\n     * this function provide a safe interface to do the transfer and avoid mistakes\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount) external override {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraws tokens from the contract\n     * @dev Escape hatch in case of mistakes or to recover remaining funds\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external override onlyOwner {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransfer(msg.sender, _amount);\n        emit TokensWithdrawn(msg.sender, _amount);\n    }\n\n    // -- Token Destinations --\n\n    /**\n     * @notice Adds an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function addTokenDestination(address _dst) external override onlyOwner {\n        require(_dst != address(0), \"Destination cannot be zero\");\n        require(_tokenDestinations.add(_dst), \"Destination already added\");\n        emit TokenDestinationAllowed(_dst, true);\n    }\n\n    /**\n     * @notice Removes an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function removeTokenDestination(address _dst) external override onlyOwner {\n        require(_tokenDestinations.remove(_dst), \"Destination already removed\");\n        emit TokenDestinationAllowed(_dst, false);\n    }\n\n    /**\n     * @notice Returns True if the address is authorized to be a destination of tokens\n     * @param _dst Destination address\n     * @return True if authorized\n     */\n    function isTokenDestination(address _dst) external view override returns (bool) {\n        return _tokenDestinations.contains(_dst);\n    }\n\n    /**\n     * @notice Returns an array of authorized destination addresses\n     * @return Array of addresses authorized to pull funds from a token lock\n     */\n    function getTokenDestinations() external view override returns (address[] memory) {\n        address[] memory dstList = new address[](_tokenDestinations.length());\n        for (uint256 i = 0; i < _tokenDestinations.length(); i++) {\n            dstList[i] = _tokenDestinations.at(i);\n        }\n        return dstList;\n    }\n\n    // -- Function Call Authorization --\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function setAuthFunctionCall(string calldata _signature, address _target) external override onlyOwner {\n        _setAuthFunctionCall(_signature, _target);\n    }\n\n    /**\n     * @notice Unsets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     */\n    function unsetAuthFunctionCall(string calldata _signature) external override onlyOwner {\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = address(0);\n\n        emit FunctionCallAuth(msg.sender, sigHash, address(0), _signature);\n    }\n\n    /**\n     * @notice Sets an authorized function call to target in bulk\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signatures Function signatures\n     * @param _targets Address of the destination contract to call\n     */\n    function setAuthFunctionCallMany(\n        string[] calldata _signatures,\n        address[] calldata _targets\n    ) external override onlyOwner {\n        require(_signatures.length == _targets.length, \"Array length mismatch\");\n\n        for (uint256 i = 0; i < _signatures.length; i++) {\n            _setAuthFunctionCall(_signatures[i], _targets[i]);\n        }\n    }\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @dev Function signatures of Graph Protocol contracts to be used are known ahead of time\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function _setAuthFunctionCall(string calldata _signature, address _target) internal {\n        require(_target != address(this), \"Target must be other contract\");\n        require(Address.isContract(_target), \"Target must be a contract\");\n\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = _target;\n\n        emit FunctionCallAuth(msg.sender, sigHash, _target, _signature);\n    }\n\n    /**\n     * @notice Gets the target contract to call for a particular function signature\n     * @param _sigHash Function signature hash\n     * @return Address of the target contract where to send the call\n     */\n    function getAuthFunctionCallTarget(bytes4 _sigHash) public view override returns (address) {\n        return authFnCalls[_sigHash];\n    }\n\n    /**\n     * @notice Returns true if the function call is authorized\n     * @param _sigHash Function signature hash\n     * @return True if authorized\n     */\n    function isAuthFunctionCall(bytes4 _sigHash) external view override returns (bool) {\n        return getAuthFunctionCallTarget(_sigHash) != address(0);\n    }\n\n    /**\n     * @dev Converts a function signature string to 4-bytes hash\n     * @param _signature Function signature string\n     * @return Function signature hash\n     */\n    function _toFunctionSigHash(string calldata _signature) internal pure returns (bytes4) {\n        return _convertToBytes4(abi.encodeWithSignature(_signature));\n    }\n\n    /**\n     * @dev Converts function signature bytes to function signature hash (bytes4)\n     * @param _signature Function signature\n     * @return Function signature in bytes4\n     */\n    function _convertToBytes4(bytes memory _signature) internal pure returns (bytes4) {\n        require(_signature.length == 4, \"Invalid method signature\");\n        bytes4 sigHash;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sigHash := mload(add(_signature, 32))\n        }\n        return sigHash;\n    }\n}\n"
    },
    "contracts/GraphTokenLockSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"./GraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLockSimple\n * @notice This contract is the concrete simple implementation built on top of the base\n * GraphTokenLock functionality for use when we only need the token lock schedule\n * features but no interaction with the network.\n *\n * This contract is designed to be deployed without the use of a TokenManager.\n */\ncontract GraphTokenLockSimple is GraphTokenLock {\n    // Constructor\n    constructor() {\n        OwnableInitializable._initialize(msg.sender);\n    }\n\n    // Initializer\n    function initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external onlyOwner {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n}\n"
    },
    "contracts/GraphTokenLockWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./GraphTokenLock.sol\";\nimport \"./IGraphTokenLockManager.sol\";\n\n/**\n * @title GraphTokenLockWallet\n * @notice This contract is built on top of the base GraphTokenLock functionality.\n * It allows wallet beneficiaries to use the deposited funds to perform specific function calls\n * on specific contracts.\n *\n * The idea is that supporters with locked tokens can participate in the protocol\n * but disallow any release before the vesting/lock schedule.\n * The beneficiary can issue authorized function calls to this contract that will\n * get forwarded to a target contract. A target contract is any of our protocol contracts.\n * The function calls allowed are queried to the GraphTokenLockManager, this way\n * the same configuration can be shared for all the created lock wallet contracts.\n *\n * NOTE: Contracts used as target must have its function signatures checked to avoid collisions\n * with any of this contract functions.\n * Beneficiaries need to approve the use of the tokens to the protocol contracts. For convenience\n * the maximum amount of tokens is authorized.\n * Function calls do not forward ETH value so DO NOT SEND ETH TO THIS CONTRACT.\n */\ncontract GraphTokenLockWallet is GraphTokenLock {\n    using SafeMath for uint256;\n\n    // -- State --\n\n    IGraphTokenLockManager public manager;\n    uint256 public usedAmount;\n\n    // -- Events --\n\n    event ManagerUpdated(address indexed _oldManager, address indexed _newManager);\n    event TokenDestinationsApproved();\n    event TokenDestinationsRevoked();\n\n    // Initializer\n    function initialize(\n        address _manager,\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        _setManager(_manager);\n    }\n\n    // -- Admin --\n\n    /**\n     * @notice Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function setManager(address _newManager) external onlyOwner {\n        _setManager(_newManager);\n    }\n\n    /**\n     * @dev Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function _setManager(address _newManager) internal {\n        require(_newManager != address(0), \"Manager cannot be empty\");\n        require(Address.isContract(_newManager), \"Manager must be a contract\");\n\n        address oldManager = address(manager);\n        manager = IGraphTokenLockManager(_newManager);\n\n        emit ManagerUpdated(oldManager, _newManager);\n    }\n\n    // -- Beneficiary --\n\n    /**\n     * @notice Approves protocol access of the tokens managed by this contract\n     * @dev Approves all token destinations registered in the manager to pull tokens\n     */\n    function approveProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            // Note this is only safe because we are using the max uint256 value\n            token.approve(dstList[i], type(uint256).max);\n        }\n        emit TokenDestinationsApproved();\n    }\n\n    /**\n     * @notice Revokes protocol access of the tokens managed by this contract\n     * @dev Revokes approval to all token destinations in the manager to pull tokens\n     */\n    function revokeProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            // Note this is only safe cause we're using 0 as the amount\n            token.approve(dstList[i], 0);\n        }\n        emit TokenDestinationsRevoked();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule, takes into account already released tokens and used amount\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view override returns (uint256) {\n        if (revocable == Revocability.Disabled) {\n            return super.releasableAmount();\n        }\n\n        // -- Revocability enabled logic\n        // This needs to deal with additional considerations for when tokens are used in the protocol\n\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        // We consider the `usedAmount` in the protocol as part of the calculations\n        // the beneficiary should not release funds that are used.\n        uint256 releasable = availableAmount().sub(releasedAmount).sub(usedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Forward authorized contract calls to protocol contracts\n     * @dev Fallback function can be called by the beneficiary only if function call is allowed\n     */\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        // Only beneficiary can forward calls\n        require(msg.sender == beneficiary, \"Unauthorized caller\");\n        require(msg.value == 0, \"ETH transfers not supported\");\n\n        // Function call validation\n        address _target = manager.getAuthFunctionCallTarget(msg.sig);\n        require(_target != address(0), \"Unauthorized function\");\n\n        uint256 oldBalance = currentBalance();\n\n        // Call function with data\n        Address.functionCall(_target, msg.data);\n\n        // Tracked used tokens in the protocol\n        // We do this check after balances were updated by the forwarded call\n        // Check is only enforced for revocable contracts to save some gas\n        if (revocable == Revocability.Enabled) {\n            // Track contract balance change\n            uint256 newBalance = currentBalance();\n            if (newBalance < oldBalance) {\n                // Outflow\n                uint256 diff = oldBalance.sub(newBalance);\n                usedAmount = usedAmount.add(diff);\n            } else {\n                // Inflow: We can receive profits from the protocol, that could make usedAmount to\n                // underflow. We set it to zero in that case.\n                uint256 diff = newBalance.sub(oldBalance);\n                usedAmount = (diff >= usedAmount) ? 0 : usedAmount.sub(diff);\n            }\n            require(usedAmount <= vestedAmount(), \"Cannot use more tokens than vested amount\");\n        }\n    }\n\n    /**\n     * @notice Receive function that always reverts.\n     * @dev Only included to supress warnings, see https://github.com/ethereum/solidity/issues/10159\n     */\n    receive() external payable {\n        revert(\"Bad call\");\n    }\n}\n"
    },
    "contracts/ICallhookReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\n// Copied from graphprotocol/contracts, changed solidity version to 0.7.3\n\n/**\n * @title Interface for contracts that can receive callhooks through the Arbitrum GRT bridge\n * @dev Any contract that can receive a callhook on L2, sent through the bridge from L1, must\n * be allowlisted by the governor, but also implement this interface that contains\n * the function that will actually be called by the L2GraphTokenGateway.\n */\npragma solidity ^0.7.3;\n\ninterface ICallhookReceiver {\n    /**\n     * @notice Receive tokens with a callhook from the bridge\n     * @param _from Token sender in L1\n     * @param _amount Amount of tokens that were transferred\n     * @param _data ABI-encoded callhook data\n     */\n    function onTokenTransfer(address _from, uint256 _amount, bytes calldata _data) external;\n}\n"
    },
    "contracts/IGraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IGraphTokenLock {\n    enum Revocability {\n        NotSet,\n        Enabled,\n        Disabled\n    }\n\n    // -- Balances --\n\n    function currentBalance() external view returns (uint256);\n\n    // -- Time & Periods --\n\n    function currentTime() external view returns (uint256);\n\n    function duration() external view returns (uint256);\n\n    function sinceStartTime() external view returns (uint256);\n\n    function amountPerPeriod() external view returns (uint256);\n\n    function periodDuration() external view returns (uint256);\n\n    function currentPeriod() external view returns (uint256);\n\n    function passedPeriods() external view returns (uint256);\n\n    // -- Locking & Release Schedule --\n\n    function availableAmount() external view returns (uint256);\n\n    function vestedAmount() external view returns (uint256);\n\n    function releasableAmount() external view returns (uint256);\n\n    function totalOutstandingAmount() external view returns (uint256);\n\n    function surplusAmount() external view returns (uint256);\n\n    // -- Value Transfer --\n\n    function release() external;\n\n    function withdrawSurplus(uint256 _amount) external;\n\n    function revoke() external;\n}\n"
    },
    "contracts/IGraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IGraphTokenLock.sol\";\n\ninterface IGraphTokenLockManager {\n    // -- Factory --\n\n    function setMasterCopy(address _masterCopy) external;\n\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IGraphTokenLock.Revocability _revocable\n    ) external;\n\n    // -- Funds Management --\n\n    function token() external returns (IERC20);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    // -- Allowed Funds Destinations --\n\n    function addTokenDestination(address _dst) external;\n\n    function removeTokenDestination(address _dst) external;\n\n    function isTokenDestination(address _dst) external view returns (bool);\n\n    function getTokenDestinations() external view returns (address[] memory);\n\n    // -- Function Call Authorization --\n\n    function setAuthFunctionCall(string calldata _signature, address _target) external;\n\n    function unsetAuthFunctionCall(string calldata _signature) external;\n\n    function setAuthFunctionCallMany(string[] calldata _signatures, address[] calldata _targets) external;\n\n    function getAuthFunctionCallTarget(bytes4 _sigHash) external view returns (address);\n\n    function isAuthFunctionCall(bytes4 _sigHash) external view returns (bool);\n}\n"
    },
    "contracts/L1GraphTokenLockTransferTool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport { ITokenGateway } from \"./arbitrum/ITokenGateway.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { L2GraphTokenLockManager } from \"./L2GraphTokenLockManager.sol\";\nimport { GraphTokenLockWallet } from \"./GraphTokenLockWallet.sol\";\nimport { MinimalProxyFactory } from \"./MinimalProxyFactory.sol\";\nimport { IGraphTokenLock } from \"./IGraphTokenLock.sol\";\nimport { Ownable as OwnableInitializable } from \"./Ownable.sol\";\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\n/**\n * @title L1GraphTokenLockTransferTool contract\n * @notice This contract is used to transfer GRT from GraphTokenLockWallets\n * to a counterpart on L2. It is deployed on L1 and will send the GRT through\n * the L1GraphTokenGateway with a callhook to the L2GraphTokenLockManager, including\n * data to create a L2GraphTokenLockWallet on L2.\n *\n * Note that the L2GraphTokenLockWallet will not allow releasing any GRT until the end of\n * the vesting timeline, but will allow sending the GRT back to the L1 wallet.\n *\n * Beneficiaries for a GraphTokenLockWallet can perform the depositToL2Locked call\n * as many times as they want, and the GRT will be sent to the same L2GraphTokenLockWallet.\n *\n * Since all retryable tickets to send transactions to L2 require ETH for gas, this\n * contract also allows users to deposit ETH to be used for gas on L2, both for\n * the depositToL2Locked calls and for the transfer tools in the Staking contract for\n * The Graph.\n *\n * See GIP-0046 for more details: https://forum.thegraph.com/t/4023\n */\ncontract L1GraphTokenLockTransferTool is OwnableInitializable, Initializable, MinimalProxyFactory {\n    using SafeMathUpgradeable for uint256;\n\n    /// Address of the L1 GRT token contract\n    IERC20 public immutable graphToken;\n    /// Address of the L2GraphTokenLockWallet implementation in L2, used to compute L2 wallet addresses\n    address public immutable l2Implementation;\n    /// Address of the L1GraphTokenGateway contract\n    ITokenGateway public immutable l1Gateway;\n    /// Address of the Staking contract, used to pull ETH for L2 ticket gas\n    address payable public immutable staking;\n    /// L2 lock manager for each L1 lock manager.\n    /// L1 GraphTokenLockManager => L2GraphTokenLockManager\n    mapping(address => address) public l2LockManager;\n    /// L2 wallet owner for each L1 wallet owner.\n    /// L1 wallet owner => L2 wallet owner\n    mapping(address => address) public l2WalletOwner;\n    /// L2 wallet address for each L1 wallet address.\n    /// L1 wallet => L2 wallet\n    mapping(address => address) public l2WalletAddress;\n    /// ETH balance from each token lock, used to pay for L2 gas:\n    /// L1 wallet address => ETH balance\n    mapping(address => uint256) public tokenLockETHBalances;\n    /// L2 beneficiary corresponding to each L1 wallet address.\n    /// L1 wallet => L2 beneficiary\n    mapping(address => address) public l2Beneficiary;\n    /// Indicates whether an L2 wallet address for a wallet\n    /// has been set manually, in which case it can't call depositToL2Locked.\n    /// L1 wallet => bool\n    mapping(address => bool) public l2WalletAddressSetManually;\n\n    /// @dev Emitted when the L2 lock manager for an L1 lock manager is set\n    event L2LockManagerSet(address indexed l1LockManager, address indexed l2LockManager);\n    /// @dev Emitted when the L2 wallet owner for an L1 wallet owner is set\n    event L2WalletOwnerSet(address indexed l1WalletOwner, address indexed l2WalletOwner);\n    /// @dev Emitted when GRT is sent to L2 from a token lock\n    event LockedFundsSentToL2(\n        address indexed l1Wallet,\n        address indexed l2Wallet,\n        address indexed l1LockManager,\n        address l2LockManager,\n        uint256 amount\n    );\n    /// @dev Emitted when an L2 wallet address is set for an L1 wallet\n    event L2WalletAddressSet(address indexed l1Wallet, address indexed l2Wallet);\n    /// @dev Emitted when ETH is deposited to a token lock's account\n    event ETHDeposited(address indexed tokenLock, uint256 amount);\n    /// @dev Emitted when ETH is withdrawn from a token lock's account\n    event ETHWithdrawn(address indexed tokenLock, address indexed destination, uint256 amount);\n    /// @dev Emitted when ETH is pulled from a token lock's account by Staking or this tool to pay for an L2 ticket\n    event ETHPulled(address indexed tokenLock, uint256 amount);\n    /// @dev Emitted when the L2 beneficiary for a partially vested L1 lock is set\n    event L2BeneficiarySet(address indexed l1Wallet, address indexed l2Beneficiary);\n\n    /**\n     * @notice Construct a new L1GraphTokenLockTransferTool contract\n     * @dev The deployer of the contract will become its owner.\n     * Note this contract is meant to be deployed behind a transparent proxy,\n     * so this will run at the implementation's storage context; it will set\n     * immutable variables and make the implementation be owned by the deployer.\n     * @param _graphToken Address of the L1 GRT token contract\n     * @param _l2Implementation Address of the L2GraphTokenLockWallet implementation in L2\n     * @param _l1Gateway Address of the L1GraphTokenGateway contract\n     * @param _staking Address of the Staking contract\n     */\n    constructor(\n        IERC20 _graphToken,\n        address _l2Implementation,\n        ITokenGateway _l1Gateway,\n        address payable _staking\n    ) initializer {\n        OwnableInitializable._initialize(msg.sender);\n        graphToken = _graphToken;\n        l2Implementation = _l2Implementation;\n        l1Gateway = _l1Gateway;\n        staking = _staking;\n    }\n\n    /**\n     * @notice Initialize the L1GraphTokenLockTransferTool contract\n     * @dev This function will run in the proxy's storage context, so it will\n     * set the owner of the proxy contract which can be different from the implementation owner.\n     * @param _owner Address of the owner of the L1GraphTokenLockTransferTool contract\n     */\n    function initialize(address _owner) external initializer {\n        OwnableInitializable._initialize(_owner);\n    }\n\n    /**\n     * @notice Set the L2 lock manager that corresponds to an L1 lock manager\n     * @param _l1LockManager Address of the L1 lock manager\n     * @param _l2LockManager Address of the L2 lock manager (in L2)\n     */\n    function setL2LockManager(address _l1LockManager, address _l2LockManager) external onlyOwner {\n        l2LockManager[_l1LockManager] = _l2LockManager;\n        emit L2LockManagerSet(_l1LockManager, _l2LockManager);\n    }\n\n    /**\n     * @notice Set the L2 wallet owner that corresponds to an L1 wallet owner\n     * @param _l1WalletOwner Address of the L1 wallet owner\n     * @param _l2WalletOwner Address of the L2 wallet owner (in L2)\n     */\n    function setL2WalletOwner(address _l1WalletOwner, address _l2WalletOwner) external onlyOwner {\n        l2WalletOwner[_l1WalletOwner] = _l2WalletOwner;\n        emit L2WalletOwnerSet(_l1WalletOwner, _l2WalletOwner);\n    }\n\n    /**\n     * @notice Deposit ETH on a token lock's account, to be used for L2 retryable ticket gas.\n     * This function can be called by anyone, but the ETH will be credited to the token lock.\n     * DO NOT try to call this through the token lock, as locks do not forward ETH value (and the\n     * function call should not be allowlisted).\n     * @param _tokenLock Address of the L1 GraphTokenLockWallet that will own the ETH\n     */\n    function depositETH(address _tokenLock) external payable {\n        tokenLockETHBalances[_tokenLock] = tokenLockETHBalances[_tokenLock].add(msg.value);\n        emit ETHDeposited(_tokenLock, msg.value);\n    }\n\n    /**\n     * @notice Withdraw ETH from a token lock's account.\n     * This function must be called from the token lock contract, but the destination\n     * _must_ be a different address, as any ETH sent to the token lock would otherwise be\n     * lost.\n     * @param _destination Address to send the ETH\n     * @param _amount Amount of ETH to send\n     */\n    function withdrawETH(address _destination, uint256 _amount) external {\n        require(_amount > 0, \"INVALID_AMOUNT\");\n        // We can't send eth to a token lock or it will be stuck\n        require(msg.sender != _destination, \"INVALID_DESTINATION\");\n        require(tokenLockETHBalances[msg.sender] >= _amount, \"INSUFFICIENT_BALANCE\");\n        tokenLockETHBalances[msg.sender] -= _amount;\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = payable(_destination).call{ value: _amount }(\"\");\n        require(success, \"TRANSFER_FAILED\");\n        emit ETHWithdrawn(msg.sender, _destination, _amount);\n    }\n\n    /**\n     * @notice Pull ETH from a token lock's account, to be used for L2 retryable ticket gas.\n     * This can only be called by the Staking contract.\n     * @param _tokenLock GraphTokenLockWallet that owns the ETH that will be debited\n     * @param _amount Amount of ETH to pull\n     */\n    function pullETH(address _tokenLock, uint256 _amount) external {\n        require(msg.sender == staking, \"ONLY_STAKING\");\n        require(tokenLockETHBalances[_tokenLock] >= _amount, \"INSUFFICIENT_BALANCE\");\n        tokenLockETHBalances[_tokenLock] -= _amount;\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = staking.call{ value: _amount }(\"\");\n        require(success, \"TRANSFER_FAILED\");\n        emit ETHPulled(_tokenLock, _amount);\n    }\n\n    /**\n     * @notice Deposit GRT to L2, from a token lock in L1 to a token lock in L2.\n     * If the token lock in L2 does not exist, it will be created when the message is received\n     * by the L2GraphTokenLockManager.\n     * Before calling this (which must be done through the token lock wallet), make sure\n     * there is enough ETH in the token lock's account to cover the L2 retryable ticket gas.\n     * Note that L2 submission fee and gas refunds will be lost.\n     * You can add ETH to the token lock's account by calling depositETH().\n     * Note that after calling this, you will NOT be able to use setL2WalletAddressManually() to\n     * set an L2 wallet address, as the L2 wallet address will be set automatically when the\n     * message is received by the L2GraphTokenLockManager.\n     * @dev The gas parameters for L2 can be estimated using the Arbitrum SDK.\n     * @param _amount Amount of GRT to deposit\n     * @param _l2Beneficiary Address of the beneficiary for the token lock in L2. Must be the same for subsequent calls of this function, and not an L1 contract.\n     * @param _maxGas Maximum gas to use for the L2 retryable ticket\n     * @param _gasPriceBid Gas price to use for the L2 retryable ticket\n     * @param _maxSubmissionCost Max submission cost for the L2 retryable ticket\n     */\n    function depositToL2Locked(\n        uint256 _amount,\n        address _l2Beneficiary,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        uint256 _maxSubmissionCost\n    ) external {\n        // Check that msg.sender is a GraphTokenLockWallet\n        // That uses GRT and has a corresponding manager set in L2.\n        GraphTokenLockWallet wallet = GraphTokenLockWallet(msg.sender);\n        require(wallet.token() == graphToken, \"INVALID_TOKEN\");\n        address l1Manager = address(wallet.manager());\n        address l2Manager = l2LockManager[l1Manager];\n        require(l2Manager != address(0), \"INVALID_MANAGER\");\n        require(wallet.isInitialized(), \"!INITIALIZED\");\n        require(wallet.revocable() != IGraphTokenLock.Revocability.Enabled, \"REVOCABLE\");\n        require(_amount <= graphToken.balanceOf(msg.sender), \"INSUFFICIENT_BALANCE\");\n        require(_amount != 0, \"ZERO_AMOUNT\");\n\n        if (l2Beneficiary[msg.sender] == address(0)) {\n            require(_l2Beneficiary != address(0), \"INVALID_BENEFICIARY_ZERO\");\n            require(!AddressUpgradeable.isContract(_l2Beneficiary), \"INVALID_BENEFICIARY_CONTRACT\");\n            l2Beneficiary[msg.sender] = _l2Beneficiary;\n            emit L2BeneficiarySet(msg.sender, _l2Beneficiary);\n        } else {\n            require(l2Beneficiary[msg.sender] == _l2Beneficiary, \"INVALID_BENEFICIARY\");\n        }\n\n        uint256 expectedEth = _maxSubmissionCost.add(_maxGas.mul(_gasPriceBid));\n        require(tokenLockETHBalances[msg.sender] >= expectedEth, \"INSUFFICIENT_ETH_BALANCE\");\n        tokenLockETHBalances[msg.sender] -= expectedEth;\n\n        bytes memory encodedData;\n        {\n            address l2Owner = l2WalletOwner[wallet.owner()];\n            require(l2Owner != address(0), \"L2_OWNER_NOT_SET\");\n            // Extract all the storage variables from the GraphTokenLockWallet\n            L2GraphTokenLockManager.TransferredWalletData memory data = L2GraphTokenLockManager.TransferredWalletData({\n                l1Address: msg.sender,\n                owner: l2Owner,\n                beneficiary: l2Beneficiary[msg.sender],\n                managedAmount: wallet.managedAmount(),\n                startTime: wallet.startTime(),\n                endTime: wallet.endTime()\n            });\n            encodedData = abi.encode(data);\n        }\n\n        if (l2WalletAddress[msg.sender] == address(0)) {\n            require(wallet.endTime() >= block.timestamp, \"FULLY_VESTED_USE_MANUAL_ADDRESS\");\n            address newAddress = getDeploymentAddress(keccak256(encodedData), l2Implementation, l2Manager);\n            l2WalletAddress[msg.sender] = newAddress;\n            emit L2WalletAddressSet(msg.sender, newAddress);\n        } else {\n            require(!l2WalletAddressSetManually[msg.sender], \"CANT_DEPOSIT_TO_MANUAL_ADDRESS\");\n        }\n\n        graphToken.transferFrom(msg.sender, address(this), _amount);\n\n        // Send the tokens with a message through the L1GraphTokenGateway to the L2GraphTokenLockManager\n        graphToken.approve(address(l1Gateway), _amount);\n        {\n            bytes memory transferData = abi.encode(_maxSubmissionCost, encodedData);\n            l1Gateway.outboundTransfer{ value: expectedEth }(\n                address(graphToken),\n                l2Manager,\n                _amount,\n                _maxGas,\n                _gasPriceBid,\n                transferData\n            );\n        }\n        emit ETHPulled(msg.sender, expectedEth);\n        emit LockedFundsSentToL2(msg.sender, l2WalletAddress[msg.sender], l1Manager, l2Manager, _amount);\n    }\n\n    /**\n     * @notice Manually set the L2 wallet address for a token lock in L1.\n     * This will only work for token locks that have not been initialized in L2 yet, and\n     * that are fully vested (endTime < current timestamp).\n     * This address can then be used to send stake or delegation to L2 on the Staking contract.\n     * After calling this, the vesting lock will NOT be allowed to use depositToL2Locked\n     * to send GRT to L2, the beneficiary must withdraw the tokens and bridge them manually.\n     * @param _l2Wallet Address of the L2 wallet\n     */\n    function setL2WalletAddressManually(address _l2Wallet) external {\n        // Check that msg.sender is a GraphTokenLockWallet\n        // That uses GRT and has a corresponding manager set in L2.\n        GraphTokenLockWallet wallet = GraphTokenLockWallet(msg.sender);\n        require(wallet.token() == graphToken, \"INVALID_TOKEN\");\n        address l1Manager = address(wallet.manager());\n        address l2Manager = l2LockManager[l1Manager];\n        require(l2Manager != address(0), \"INVALID_MANAGER\");\n        require(wallet.isInitialized(), \"!INITIALIZED\");\n\n        // Check that the wallet is fully vested\n        require(wallet.endTime() < block.timestamp, \"NOT_FULLY_VESTED\");\n\n        // Check that the wallet has not set an L2 wallet yet\n        require(l2WalletAddress[msg.sender] == address(0), \"L2_WALLET_ALREADY_SET\");\n\n        // Check that the L2 address is not zero\n        require(_l2Wallet != address(0), \"ZERO_ADDRESS\");\n        // Set the L2 wallet address\n        l2WalletAddress[msg.sender] = _l2Wallet;\n        l2WalletAddressSetManually[msg.sender] = true;\n        emit L2WalletAddressSet(msg.sender, _l2Wallet);\n    }\n}\n"
    },
    "contracts/L2GraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport { ICallhookReceiver } from \"./ICallhookReceiver.sol\";\nimport { GraphTokenLockManager } from \"./GraphTokenLockManager.sol\";\nimport { L2GraphTokenLockWallet } from \"./L2GraphTokenLockWallet.sol\";\n\n/**\n * @title L2GraphTokenLockManager\n * @notice This contract manages a list of authorized function calls and targets that can be called\n * by any TokenLockWallet contract and it is a factory of TokenLockWallet contracts.\n *\n * This contract receives funds to make the process of creating TokenLockWallet contracts\n * easier by distributing them the initial tokens to be managed.\n *\n * In particular, this L2 variant is designed to receive token lock wallets from L1,\n * through the GRT bridge. These transferred wallets will not allow releasing funds in L2 until\n * the end of the vesting timeline, but they can allow withdrawing funds back to L1 using\n * the L2GraphTokenLockTransferTool contract.\n *\n * The owner can setup a list of token destinations that will be used by TokenLock contracts to\n * approve the pulling of funds, this way in can be guaranteed that only protocol contracts\n * will manipulate users funds.\n */\ncontract L2GraphTokenLockManager is GraphTokenLockManager, ICallhookReceiver {\n    using SafeERC20 for IERC20;\n\n    /// @dev Struct to hold the data of a transferred wallet; this is\n    /// the data that must be encoded in L1 to send a wallet to L2.\n    struct TransferredWalletData {\n        address l1Address;\n        address owner;\n        address beneficiary;\n        uint256 managedAmount;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /// Address of the L2GraphTokenGateway\n    address public immutable l2Gateway;\n    /// Address of the L1 transfer tool contract (in L1, no aliasing)\n    address public immutable l1TransferTool;\n    /// Mapping of each L1 wallet to its L2 wallet counterpart (populated when each wallet is received)\n    /// L1 address => L2 address\n    mapping(address => address) public l1WalletToL2Wallet;\n    /// Mapping of each L2 wallet to its L1 wallet counterpart (populated when each wallet is received)\n    /// L2 address => L1 address\n    mapping(address => address) public l2WalletToL1Wallet;\n\n    /// @dev Event emitted when a wallet is received and created from L1\n    event TokenLockCreatedFromL1(\n        address indexed contractAddress,\n        bytes32 initHash,\n        address indexed beneficiary,\n        uint256 managedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        address indexed l1Address\n    );\n\n    /// @dev Emitted when locked tokens are received from L1 (whether the wallet\n    /// had already been received or not)\n    event LockedTokensReceivedFromL1(address indexed l1Address, address indexed l2Address, uint256 amount);\n\n    /**\n     * @dev Checks that the sender is the L2GraphTokenGateway.\n     */\n    modifier onlyL2Gateway() {\n        require(msg.sender == l2Gateway, \"ONLY_GATEWAY\");\n        _;\n    }\n\n    /**\n     * @notice Constructor for the L2GraphTokenLockManager contract.\n     * @param _graphToken Address of the L2 GRT token contract\n     * @param _masterCopy Address of the master copy of the L2GraphTokenLockWallet implementation\n     * @param _l2Gateway Address of the L2GraphTokenGateway contract\n     * @param _l1TransferTool Address of the L1 transfer tool contract (in L1, without aliasing)\n     */\n    constructor(\n        IERC20 _graphToken,\n        address _masterCopy,\n        address _l2Gateway,\n        address _l1TransferTool\n    ) GraphTokenLockManager(_graphToken, _masterCopy) {\n        l2Gateway = _l2Gateway;\n        l1TransferTool = _l1TransferTool;\n    }\n\n    /**\n     * @notice This function is called by the L2GraphTokenGateway when tokens are sent from L1.\n     * @dev This function will create a new wallet if it doesn't exist yet, or send the tokens to\n     * the existing wallet if it does.\n     * @param _from Address of the sender in L1, which must be the L1GraphTokenLockTransferTool\n     * @param _amount Amount of tokens received\n     * @param _data Encoded data of the transferred wallet, which must be an ABI-encoded TransferredWalletData struct\n     */\n    function onTokenTransfer(address _from, uint256 _amount, bytes calldata _data) external override onlyL2Gateway {\n        require(_from == l1TransferTool, \"ONLY_TRANSFER_TOOL\");\n        TransferredWalletData memory walletData = abi.decode(_data, (TransferredWalletData));\n\n        if (l1WalletToL2Wallet[walletData.l1Address] != address(0)) {\n            // If the wallet was already received, just send the tokens to the L2 address\n            _token.safeTransfer(l1WalletToL2Wallet[walletData.l1Address], _amount);\n        } else {\n            // Create contract using a minimal proxy and call initializer\n            (bytes32 initHash, address contractAddress) = _deployFromL1(keccak256(_data), walletData);\n            l1WalletToL2Wallet[walletData.l1Address] = contractAddress;\n            l2WalletToL1Wallet[contractAddress] = walletData.l1Address;\n\n            // Send managed amount to the created contract\n            _token.safeTransfer(contractAddress, _amount);\n\n            emit TokenLockCreatedFromL1(\n                contractAddress,\n                initHash,\n                walletData.beneficiary,\n                walletData.managedAmount,\n                walletData.startTime,\n                walletData.endTime,\n                walletData.l1Address\n            );\n        }\n        emit LockedTokensReceivedFromL1(walletData.l1Address, l1WalletToL2Wallet[walletData.l1Address], _amount);\n    }\n\n    /**\n     * @dev Deploy a token lock wallet with data received from L1\n     * @param _salt Salt for the CREATE2 call, which must be the hash of the wallet data\n     * @param _walletData Data of the wallet to be created\n     * @return Hash of the initialization calldata\n     * @return Address of the created contract\n     */\n    function _deployFromL1(bytes32 _salt, TransferredWalletData memory _walletData) internal returns (bytes32, address) {\n        bytes memory initializer = _encodeInitializer(_walletData);\n        address contractAddress = _deployProxy2(_salt, masterCopy, initializer);\n        return (keccak256(initializer), contractAddress);\n    }\n\n    /**\n     * @dev Encode the initializer for the token lock wallet received from L1\n     * @param _walletData Data of the wallet to be created\n     * @return Encoded initializer calldata, including the function signature\n     */\n    function _encodeInitializer(TransferredWalletData memory _walletData) internal view returns (bytes memory) {\n        return\n            abi.encodeWithSelector(\n                L2GraphTokenLockWallet.initializeFromL1.selector,\n                address(this),\n                address(_token),\n                _walletData\n            );\n    }\n}\n"
    },
    "contracts/L2GraphTokenLockTransferTool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { L2GraphTokenLockManager } from \"./L2GraphTokenLockManager.sol\";\nimport { L2GraphTokenLockWallet } from \"./L2GraphTokenLockWallet.sol\";\nimport { ITokenGateway } from \"./arbitrum/ITokenGateway.sol\";\n\n/**\n * @title L2GraphTokenLockTransferTool contract\n * @notice This contract is used to transfer GRT from L2 token lock wallets\n * back to their L1 counterparts.\n */\ncontract L2GraphTokenLockTransferTool {\n    /// Address of the L2 GRT token\n    IERC20 public immutable graphToken;\n    /// Address of the L2GraphTokenGateway\n    ITokenGateway public immutable l2Gateway;\n    /// Address of the L1 GRT token (in L1, no aliasing)\n    address public immutable l1GraphToken;\n\n    /// @dev Emitted when GRT is sent to L1 from a token lock\n    event LockedFundsSentToL1(\n        address indexed l1Wallet,\n        address indexed l2Wallet,\n        address indexed l2LockManager,\n        uint256 amount\n    );\n\n    /**\n     * @notice Constructor for the L2GraphTokenLockTransferTool contract\n     * @dev Note the L2GraphTokenLockTransferTool can be deployed behind a proxy,\n     * and the constructor for the implementation will only set some immutable\n     * variables.\n     * @param _graphToken Address of the L2 GRT token\n     * @param _l2Gateway Address of the L2GraphTokenGateway\n     * @param _l1GraphToken Address of the L1 GRT token (in L1, no aliasing)\n     */\n    constructor(IERC20 _graphToken, ITokenGateway _l2Gateway, address _l1GraphToken) {\n        graphToken = _graphToken;\n        l2Gateway = _l2Gateway;\n        l1GraphToken = _l1GraphToken;\n    }\n\n    /**\n     * @notice Withdraw GRT from an L2 token lock wallet to its L1 counterpart.\n     * This function must be called from an L2GraphTokenLockWallet contract.\n     * The GRT will be sent to L1 and must be claimed using the Arbitrum Outbox on L1\n     * after the standard Arbitrum withdrawal period (7 days).\n     * @param _amount Amount of GRT to withdraw\n     */\n    function withdrawToL1Locked(uint256 _amount) external {\n        L2GraphTokenLockWallet wallet = L2GraphTokenLockWallet(msg.sender);\n        L2GraphTokenLockManager manager = L2GraphTokenLockManager(address(wallet.manager()));\n        require(address(manager) != address(0), \"INVALID_SENDER\");\n        address l1Wallet = manager.l2WalletToL1Wallet(msg.sender);\n        require(l1Wallet != address(0), \"NOT_L1_WALLET\");\n        require(_amount <= graphToken.balanceOf(msg.sender), \"INSUFFICIENT_BALANCE\");\n        require(_amount != 0, \"ZERO_AMOUNT\");\n\n        graphToken.transferFrom(msg.sender, address(this), _amount);\n        graphToken.approve(address(l2Gateway), _amount);\n\n        // Send the tokens through the L2GraphTokenGateway to the L1 wallet counterpart\n        l2Gateway.outboundTransfer(l1GraphToken, l1Wallet, _amount, 0, 0, \"\");\n        emit LockedFundsSentToL1(l1Wallet, msg.sender, address(manager), _amount);\n    }\n}\n"
    },
    "contracts/L2GraphTokenLockWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { GraphTokenLockWallet } from \"./GraphTokenLockWallet.sol\";\nimport { Ownable as OwnableInitializable } from \"./Ownable.sol\";\nimport { L2GraphTokenLockManager } from \"./L2GraphTokenLockManager.sol\";\n\n/**\n * @title L2GraphTokenLockWallet\n * @notice This contract is built on top of the base GraphTokenLock functionality.\n * It allows wallet beneficiaries to use the deposited funds to perform specific function calls\n * on specific contracts.\n *\n * The idea is that supporters with locked tokens can participate in the protocol\n * but disallow any release before the vesting/lock schedule.\n * The beneficiary can issue authorized function calls to this contract that will\n * get forwarded to a target contract. A target contract is any of our protocol contracts.\n * The function calls allowed are queried to the GraphTokenLockManager, this way\n * the same configuration can be shared for all the created lock wallet contracts.\n *\n * This L2 variant includes a special initializer so that it can be created from\n * a wallet's data received from L1. These transferred wallets will not allow releasing\n * funds in L2 until the end of the vesting timeline, but they can allow withdrawing\n * funds back to L1 using the L2GraphTokenLockTransferTool contract.\n *\n * Note that surplusAmount and releasedAmount in L2 will be skewed for wallets received from L1,\n * so releasing surplus tokens might also only be possible by bridging tokens back to L1.\n *\n * NOTE: Contracts used as target must have its function signatures checked to avoid collisions\n * with any of this contract functions.\n * Beneficiaries need to approve the use of the tokens to the protocol contracts. For convenience\n * the maximum amount of tokens is authorized.\n * Function calls do not forward ETH value so DO NOT SEND ETH TO THIS CONTRACT.\n */\ncontract L2GraphTokenLockWallet is GraphTokenLockWallet {\n    // Initializer when created from a message from L1\n    function initializeFromL1(\n        address _manager,\n        address _token,\n        L2GraphTokenLockManager.TransferredWalletData calldata _walletData\n    ) external {\n        require(!isInitialized, \"Already initialized\");\n        isInitialized = true;\n\n        OwnableInitializable._initialize(_walletData.owner);\n        beneficiary = _walletData.beneficiary;\n        token = IERC20(_token);\n\n        managedAmount = _walletData.managedAmount;\n\n        startTime = _walletData.startTime;\n        endTime = _walletData.endTime;\n        periods = 1;\n        isAccepted = true;\n\n        // Optionals\n        releaseStartTime = _walletData.endTime;\n        revocable = Revocability.Disabled;\n\n        _setManager(_manager);\n    }\n}\n"
    },
    "contracts/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nlibrary MathUtils {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/MinimalProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\n\n/**\n * @title MinimalProxyFactory: a factory contract for creating minimal proxies\n * @notice Adapted from https://github.com/OpenZeppelin/openzeppelin-sdk/blob/v2.5.0/packages/lib/contracts/upgradeability/ProxyFactory.sol\n * Based on https://eips.ethereum.org/EIPS/eip-1167\n */\ncontract MinimalProxyFactory {\n    /// @dev Emitted when a new proxy is created\n    event ProxyCreated(address indexed proxy);\n\n    /**\n     * @notice Gets the deterministic CREATE2 address for MinimalProxy with a particular implementation\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @param _deployer Address of the deployer that creates the contract\n     * @return Address of the counterfactual MinimalProxy\n     */\n    function getDeploymentAddress(\n        bytes32 _salt,\n        address _implementation,\n        address _deployer\n    ) public pure returns (address) {\n        return Create2.computeAddress(_salt, keccak256(_getContractCreationCode(_implementation)), _deployer);\n    }\n\n    /**\n     * @dev Deploys a MinimalProxy with CREATE2\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @param _data Bytes with the initializer call\n     * @return Address of the deployed MinimalProxy\n     */\n    function _deployProxy2(bytes32 _salt, address _implementation, bytes memory _data) internal returns (address) {\n        address proxyAddress = Create2.deploy(0, _salt, _getContractCreationCode(_implementation));\n\n        emit ProxyCreated(proxyAddress);\n\n        // Call function with data\n        if (_data.length > 0) {\n            Address.functionCall(proxyAddress, _data);\n        }\n\n        return proxyAddress;\n    }\n\n    /**\n     * @dev Gets the MinimalProxy bytecode\n     * @param _implementation Address of the proxy target implementation\n     * @return MinimalProxy bytecode\n     */\n    function _getContractCreationCode(address _implementation) internal pure returns (bytes memory) {\n        bytes10 creation = 0x3d602d80600a3d3981f3;\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\n        bytes20 targetBytes = bytes20(_implementation);\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\n    }\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The owner account will be passed on initialization of the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    /// @dev Owner of the contract, can be retrieved with the public owner() function\n    address private _owner;\n    /// @dev Since upgradeable contracts might inherit this, we add a storage gap\n    /// to allow adding variables here without breaking the proxy storage layout\n    uint256[50] private __gap;\n\n    /// @dev Emitted when ownership of the contract is transferred\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function _initialize(address owner) internal {\n        _owner = owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/tests/arbitrum/AddressAliasHelper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2019-2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Originally copied from:\n * https://github.com/OffchainLabs/arbitrum/tree/84e64dee6ee82adbf8ec34fd4b86c207a61d9007/packages/arb-bridge-eth\n *\n * MODIFIED from Offchain Labs' implementation:\n * - Changed solidity version to 0.7.3 (pablo@edgeandnode.com)\n *\n */\n\npragma solidity ^0.7.3;\n\nlibrary AddressAliasHelper {\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\n\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\n    /// the inbox to the msg.sender viewed in the L2\n    /// @param l1Address the address in the L1 that triggered the tx to L2\n    /// @return l2Address L2 address as viewed in msg.sender\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\n        l2Address = address(uint160(l1Address) + offset);\n    }\n\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\n    /// address in the L1 that submitted a tx to the inbox\n    /// @param l2Address L2 address as viewed in msg.sender\n    /// @return l1Address the address in the L1 that triggered the tx to L2\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\n        l1Address = address(uint160(l2Address) - offset);\n    }\n}\n"
    },
    "contracts/tests/arbitrum/IBridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Originally copied from:\n * https://github.com/OffchainLabs/arbitrum/tree/e3a6307ad8a2dc2cad35728a2a9908cfd8dd8ef9/packages/arb-bridge-eth\n *\n * MODIFIED from Offchain Labs' implementation:\n * - Changed solidity version to 0.7.3 (pablo@edgeandnode.com)\n *\n */\n\npragma solidity ^0.7.3;\n\ninterface IBridge {\n    event MessageDelivered(\n        uint256 indexed messageIndex,\n        bytes32 indexed beforeInboxAcc,\n        address inbox,\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    );\n\n    event BridgeCallTriggered(address indexed outbox, address indexed destAddr, uint256 amount, bytes data);\n\n    event InboxToggle(address indexed inbox, bool enabled);\n\n    event OutboxToggle(address indexed outbox, bool enabled);\n\n    function deliverMessageToInbox(\n        uint8 kind,\n        address sender,\n        bytes32 messageDataHash\n    ) external payable returns (uint256);\n\n    function executeCall(\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool success, bytes memory returnData);\n\n    // These are only callable by the admin\n    function setInbox(address inbox, bool enabled) external;\n\n    function setOutbox(address inbox, bool enabled) external;\n\n    // View functions\n\n    function activeOutbox() external view returns (address);\n\n    function allowedInboxes(address inbox) external view returns (bool);\n\n    function allowedOutboxes(address outbox) external view returns (bool);\n\n    function inboxAccs(uint256 index) external view returns (bytes32);\n\n    function messageCount() external view returns (uint256);\n}\n"
    },
    "contracts/tests/arbitrum/IInbox.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Originally copied from:\n * https://github.com/OffchainLabs/arbitrum/tree/e3a6307ad8a2dc2cad35728a2a9908cfd8dd8ef9/packages/arb-bridge-eth\n *\n * MODIFIED from Offchain Labs' implementation:\n * - Changed solidity version to 0.7.3 (pablo@edgeandnode.com)\n *\n */\n\npragma solidity ^0.7.3;\n\nimport \"./IBridge.sol\";\nimport \"./IMessageProvider.sol\";\n\ninterface IInbox is IMessageProvider {\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\n\n    function sendUnsignedTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        uint256 nonce,\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendContractTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        address destAddr,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function sendL1FundedUnsignedTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        uint256 nonce,\n        address destAddr,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function sendL1FundedContractTransaction(\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        address destAddr,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function createRetryableTicket(\n        address destAddr,\n        uint256 arbTxCallValue,\n        uint256 maxSubmissionCost,\n        address submissionRefundAddress,\n        address valueRefundAddress,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\n\n    function bridge() external view returns (IBridge);\n\n    function pauseCreateRetryables() external;\n\n    function unpauseCreateRetryables() external;\n\n    function startRewriteAddress() external;\n\n    function stopRewriteAddress() external;\n}\n"
    },
    "contracts/tests/arbitrum/IMessageProvider.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Originally copied from:\n * https://github.com/OffchainLabs/arbitrum/tree/e3a6307ad8a2dc2cad35728a2a9908cfd8dd8ef9/packages/arb-bridge-eth\n *\n * MODIFIED from Offchain Labs' implementation:\n * - Changed solidity version to 0.7.3 (pablo@edgeandnode.com)\n *\n */\n\npragma solidity ^0.7.3;\n\ninterface IMessageProvider {\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\n\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\n}\n"
    },
    "contracts/tests/BridgeMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.7.3;\n\nimport \"./arbitrum/IBridge.sol\";\n\n/**\n * @title Arbitrum Bridge mock contract\n * @dev This contract implements Arbitrum's IBridge interface for testing purposes\n */\ncontract BridgeMock is IBridge {\n    /// Address of the (mock) Arbitrum Inbox\n    address public inbox;\n    /// Address of the (mock) Arbitrum Outbox\n    address public outbox;\n    /// Index of the next message on the inbox messages array\n    uint256 public messageIndex;\n    /// Inbox messages array\n    bytes32[] public override inboxAccs;\n\n    /**\n     * @notice Deliver a message to the inbox. The encoded message will be\n     * added to the inbox array, and messageIndex will be incremented.\n     * @param _kind Type of the message\n     * @param _sender Address that is sending the message\n     * @param _messageDataHash keccak256 hash of the message data\n     * @return The next index for the inbox array\n     */\n    function deliverMessageToInbox(\n        uint8 _kind,\n        address _sender,\n        bytes32 _messageDataHash\n    ) external payable override returns (uint256) {\n        messageIndex = messageIndex + 1;\n        inboxAccs.push(keccak256(abi.encodePacked(inbox, _kind, _sender, _messageDataHash)));\n        emit MessageDelivered(messageIndex, inboxAccs[messageIndex - 1], msg.sender, _kind, _sender, _messageDataHash);\n        return messageIndex;\n    }\n\n    /**\n     * @notice Executes an L1 function call incoing from L2. This can only be called\n     * by the Outbox.\n     * @param _destAddr Contract to call\n     * @param _amount ETH value to send\n     * @param _data Calldata for the function call\n     * @return True if the call was successful, false otherwise\n     * @return Return data from the call\n     */\n    function executeCall(\n        address _destAddr,\n        uint256 _amount,\n        bytes calldata _data\n    ) external override returns (bool, bytes memory) {\n        require(outbox == msg.sender, \"NOT_FROM_OUTBOX\");\n        bool success;\n        bytes memory returnData;\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, returnData) = _destAddr.call{ value: _amount }(_data);\n        emit BridgeCallTriggered(msg.sender, _destAddr, _amount, _data);\n        return (success, returnData);\n    }\n\n    /**\n     * @notice Set the address of the inbox. Anyone can call this, because it's a mock.\n     * @param _inbox Address of the inbox\n     * @param _enabled Enable the inbox (ignored)\n     */\n    function setInbox(address _inbox, bool _enabled) external override {\n        inbox = _inbox;\n        emit InboxToggle(inbox, _enabled);\n    }\n\n    /**\n     * @notice Set the address of the outbox. Anyone can call this, because it's a mock.\n     * @param _outbox Address of the outbox\n     * @param _enabled Enable the outbox (ignored)\n     */\n    function setOutbox(address _outbox, bool _enabled) external override {\n        outbox = _outbox;\n        emit OutboxToggle(outbox, _enabled);\n    }\n\n    // View functions\n\n    /**\n     * @notice Getter for the active outbox (in this case there's only one)\n     */\n    function activeOutbox() external view override returns (address) {\n        return outbox;\n    }\n\n    /**\n     * @notice Getter for whether an address is an allowed inbox (in this case there's only one)\n     * @param _inbox Address to check\n     * @return True if the address is the allowed inbox, false otherwise\n     */\n    function allowedInboxes(address _inbox) external view override returns (bool) {\n        return _inbox == inbox;\n    }\n\n    /**\n     * @notice Getter for whether an address is an allowed outbox (in this case there's only one)\n     * @param _outbox Address to check\n     * @return True if the address is the allowed outbox, false otherwise\n     */\n    function allowedOutboxes(address _outbox) external view override returns (bool) {\n        return _outbox == outbox;\n    }\n\n    /**\n     * @notice Getter for the count of messages in the inboxAccs\n     * @return Number of messages in inboxAccs\n     */\n    function messageCount() external view override returns (uint256) {\n        return inboxAccs.length;\n    }\n}\n"
    },
    "contracts/tests/GraphTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Graph Token Mock contract.\n * @dev Used for testing purposes, DO NOT USE IN PRODUCTION\n */\ncontract GraphTokenMock is Ownable, ERC20 {\n    /**\n     * @notice Contract Constructor.\n     * @param _initialSupply Initial supply\n     * @param _mintTo Address to whitch to mint the initial supply\n     */\n    constructor(uint256 _initialSupply, address _mintTo) ERC20(\"Graph Token Mock\", \"GRT-Mock\") {\n        // Deploy to mint address\n        _mint(_mintTo, _initialSupply);\n    }\n\n    /**\n     * @notice Mint tokens to an address from the bridge.\n     * (The real one has an onlyGateway modifier)\n     * @param _to Address to mint tokens to\n     * @param _amount Amount of tokens to mint\n     */\n    function bridgeMint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice Burn tokens from an address from the bridge.\n     * (The real one has an onlyGateway modifier)\n     * @param _from Address to burn tokens from\n     * @param _amount Amount of tokens to burn\n     */\n    function bridgeBurn(address _from, uint256 _amount) external {\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/tests/InboxMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.7.3;\n\nimport \"./arbitrum/IInbox.sol\";\nimport \"./arbitrum/AddressAliasHelper.sol\";\n\n/**\n * @title Arbitrum Inbox mock contract\n * @dev This contract implements (a subset of) Arbitrum's IInbox interface for testing purposes\n */\ncontract InboxMock is IInbox {\n    /// @dev Type indicator for a standard L2 message\n    uint8 internal constant L2_MSG = 3;\n    /// @dev Type indicator for a retryable ticket message\n    // solhint-disable-next-line const-name-snakecase\n    uint8 internal constant L1MessageType_submitRetryableTx = 9;\n    /// Address of the Bridge (mock) contract\n    IBridge public override bridge;\n\n    /**\n     * @notice Send a message to L2 (by delivering it to the Bridge)\n     * @param _messageData Encoded data to send in the message\n     * @return Message number returned by the inbox\n     */\n    function sendL2Message(bytes calldata _messageData) external override returns (uint256) {\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    /**\n     * @notice Set the address of the (mock) bridge\n     * @param _bridge Address of the bridge\n     */\n    function setBridge(address _bridge) external {\n        bridge = IBridge(_bridge);\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function sendUnsignedTransaction(\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (uint256) {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function sendContractTransaction(\n        uint256,\n        uint256,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (uint256) {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function sendL1FundedUnsignedTransaction(\n        uint256,\n        uint256,\n        uint256,\n        address,\n        bytes calldata\n    ) external payable override returns (uint256) {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function sendL1FundedContractTransaction(\n        uint256,\n        uint256,\n        address,\n        bytes calldata\n    ) external payable override returns (uint256) {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Creates a retryable ticket for an L2 transaction\n     * @param _destAddr Address of the contract to call in L2\n     * @param _arbTxCallValue Callvalue to use in the L2 transaction\n     * @param _maxSubmissionCost Max cost of submitting the ticket, in Wei\n     * @param _submissionRefundAddress L2 address to refund for any remaining value from the submission cost\n     * @param _valueRefundAddress L2 address to refund if the ticket times out or gets cancelled\n     * @param _maxGas Max gas for the L2 transcation\n     * @param _gasPriceBid Gas price bid on L2\n     * @param _data Encoded calldata for the L2 transaction (including function selector)\n     * @return Message number returned by the bridge\n     */\n    function createRetryableTicket(\n        address _destAddr,\n        uint256 _arbTxCallValue,\n        uint256 _maxSubmissionCost,\n        address _submissionRefundAddress,\n        address _valueRefundAddress,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        bytes calldata _data\n    ) external payable override returns (uint256) {\n        _submissionRefundAddress = AddressAliasHelper.applyL1ToL2Alias(_submissionRefundAddress);\n        _valueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(_valueRefundAddress);\n        return\n            _deliverMessage(\n                L1MessageType_submitRetryableTx,\n                msg.sender,\n                abi.encodePacked(\n                    uint256(uint160(bytes20(_destAddr))),\n                    _arbTxCallValue,\n                    msg.value,\n                    _maxSubmissionCost,\n                    uint256(uint160(bytes20(_submissionRefundAddress))),\n                    uint256(uint160(bytes20(_valueRefundAddress))),\n                    _maxGas,\n                    _gasPriceBid,\n                    _data.length,\n                    _data\n                )\n            );\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function depositEth(uint256) external payable override returns (uint256) {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function pauseCreateRetryables() external pure override {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function unpauseCreateRetryables() external pure override {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function startRewriteAddress() external pure override {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @notice Unimplemented in this mock\n     */\n    function stopRewriteAddress() external pure override {\n        revert(\"Unimplemented\");\n    }\n\n    /**\n     * @dev Deliver a message to the bridge\n     * @param _kind Type of the message\n     * @param _sender Address that is sending the message\n     * @param _messageData Encoded message data\n     * @return Message number returned by the bridge\n     */\n    function _deliverMessage(uint8 _kind, address _sender, bytes memory _messageData) internal returns (uint256) {\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\n        emit InboxMessageDelivered(msgNum, _messageData);\n        return msgNum;\n    }\n\n    /**\n     * @dev Deliver a message to the bridge\n     * @param _kind Type of the message\n     * @param _sender Address that is sending the message\n     * @param _messageDataHash keccak256 hash of the encoded message data\n     * @return Message number returned by the bridge\n     */\n    function deliverToBridge(uint8 _kind, address _sender, bytes32 _messageDataHash) internal returns (uint256) {\n        return bridge.deliverMessageToInbox{ value: msg.value }(_kind, _sender, _messageDataHash);\n    }\n}\n"
    },
    "contracts/tests/L1TokenGatewayMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { ITokenGateway } from \"../arbitrum//ITokenGateway.sol\";\n\n/**\n * @title L1 Token Gateway mock contract\n * @dev Used for testing purposes, DO NOT USE IN PRODUCTION\n */\ncontract L1TokenGatewayMock is Ownable {\n    using SafeMath for uint256;\n    /// Next sequence number to return when outboundTransfer is called\n    uint256 public nextSeqNum;\n\n    /// @dev Emitted when a (fake) retryable ticket is created\n    event FakeTxToL2(\n        address from,\n        uint256 value,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        uint256 maxSubmissionCost,\n        bytes outboundCalldata\n    );\n\n    /// @dev Emitted when an outbound transfer is initiated, i.e. tokens are deposited from L1 to L2\n    event DepositInitiated(\n        address l1Token,\n        address indexed from,\n        address indexed to,\n        uint256 indexed sequenceNumber,\n        uint256 amount\n    );\n\n    /**\n     * @notice L1 Token Gateway Contract Constructor.\n     */\n    constructor() {}\n\n    /**\n     * @notice Creates and sends a fake retryable ticket to transfer GRT to L2.\n     * This mock will actually just emit an event with parameters equivalent to what the real L1GraphTokenGateway\n     * would send to L2.\n     * @param _l1Token L1 Address of the GRT contract (needed for compatibility with Arbitrum Gateway Router)\n     * @param _to Recipient address on L2\n     * @param _amount Amount of tokens to tranfer\n     * @param _maxGas Gas limit for L2 execution of the ticket\n     * @param _gasPriceBid Price per gas on L2\n     * @param _data Encoded maxSubmissionCost and sender address along with additional calldata\n     * @return Sequence number of the retryable ticket created by Inbox (always )\n     */\n    function outboundTransfer(\n        address _l1Token,\n        address _to,\n        uint256 _amount,\n        uint256 _maxGas,\n        uint256 _gasPriceBid,\n        bytes calldata _data\n    ) external payable returns (bytes memory) {\n        require(_amount > 0, \"INVALID_ZERO_AMOUNT\");\n        require(_to != address(0), \"INVALID_DESTINATION\");\n\n        // nested scopes to avoid stack too deep errors\n        address from;\n        uint256 seqNum = nextSeqNum;\n        nextSeqNum += 1;\n        {\n            uint256 maxSubmissionCost;\n            bytes memory outboundCalldata;\n            {\n                bytes memory extraData;\n                (from, maxSubmissionCost, extraData) = _parseOutboundData(_data);\n                require(maxSubmissionCost > 0, \"NO_SUBMISSION_COST\");\n\n                {\n                    // makes sure only sufficient ETH is supplied as required for successful redemption on L2\n                    // if a user does not desire immediate redemption they should provide\n                    // a msg.value of AT LEAST maxSubmissionCost\n                    uint256 expectedEth = maxSubmissionCost.add(_maxGas.mul(_gasPriceBid));\n                    require(msg.value >= expectedEth, \"WRONG_ETH_VALUE\");\n                }\n                outboundCalldata = getOutboundCalldata(_l1Token, from, _to, _amount, extraData);\n            }\n            {\n                // transfer tokens to escrow\n                IERC20(_l1Token).transferFrom(from, address(this), _amount);\n\n                emit FakeTxToL2(from, msg.value, _maxGas, _gasPriceBid, maxSubmissionCost, outboundCalldata);\n            }\n        }\n        emit DepositInitiated(_l1Token, from, _to, seqNum, _amount);\n\n        return abi.encode(seqNum);\n    }\n\n    /**\n     * @notice (Mock) Receives withdrawn tokens from L2\n     * Actually does nothing, just keeping it here as its useful to define the expected\n     * calldata for the outgoing transfer in tests.\n     * @param _l1Token L1 Address of the GRT contract (needed for compatibility with Arbitrum Gateway Router)\n     * @param _from Address of the sender\n     * @param _to Recepient address on L1\n     * @param _amount Amount of tokens transferred\n     * @param _data Additional calldata\n     */\n    function finalizeInboundTransfer(\n        address _l1Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external payable {}\n\n    /**\n     * @notice Creates calldata required to create a retryable ticket\n     * @dev encodes the target function with its params which\n     * will be called on L2 when the retryable ticket is redeemed\n     * @param _l1Token Address of the Graph token contract on L1\n     * @param _from Address on L1 from which we're transferring tokens\n     * @param _to Address on L2 to which we're transferring tokens\n     * @param _amount Amount of GRT to transfer\n     * @param _data Additional call data for the L2 transaction, which must be empty unless the caller is whitelisted\n     * @return Encoded calldata (including function selector) for the L2 transaction\n     */\n    function getOutboundCalldata(\n        address _l1Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data\n    ) public pure returns (bytes memory) {\n        bytes memory emptyBytes;\n\n        return\n            abi.encodeWithSelector(\n                ITokenGateway.finalizeInboundTransfer.selector,\n                _l1Token,\n                _from,\n                _to,\n                _amount,\n                abi.encode(emptyBytes, _data)\n            );\n    }\n\n    /**\n     * @notice Decodes calldata required for transfer of tokens to L2\n     * @dev Data must include maxSubmissionCost, extraData can be left empty. When the router\n     * sends an outbound message, data also contains the from address, but this mock\n     * doesn't consider this case\n     * @param _data Encoded callhook data containing maxSubmissionCost and extraData\n     * @return Sender of the tx\n     * @return Max ether value used to submit the retryable ticket\n     * @return Additional data sent to L2\n     */\n    function _parseOutboundData(bytes memory _data) private view returns (address, uint256, bytes memory) {\n        address from;\n        uint256 maxSubmissionCost;\n        bytes memory extraData;\n        from = msg.sender;\n        // User-encoded data contains the max retryable ticket submission cost\n        // and additional L2 calldata\n        (maxSubmissionCost, extraData) = abi.decode(_data, (uint256, bytes));\n        return (from, maxSubmissionCost, extraData);\n    }\n}\n"
    },
    "contracts/tests/L2TokenGatewayMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ITokenGateway } from \"../arbitrum//ITokenGateway.sol\";\nimport { GraphTokenMock } from \"./GraphTokenMock.sol\";\nimport { ICallhookReceiver } from \"../ICallhookReceiver.sol\";\n\n/**\n * @title L2 Token Gateway mock contract\n * @dev Used for testing purposes, DO NOT USE IN PRODUCTION\n */\ncontract L2TokenGatewayMock is Ownable {\n    /// Address of the L1 GRT contract\n    address public immutable l1Token;\n    /// Address of the L2 GRT contract\n    address public immutable l2Token;\n    /// Next ID to return when sending an outboundTransfer\n    uint256 public nextId;\n\n    /// @dev Emitted when a (fake) transaction to L1 is created\n    event FakeTxToL1(address from, bytes outboundCalldata);\n    /// @dev Emitted when a (fake) retryable ticket is received from L1\n    event DepositFinalized(address token, address indexed from, address indexed to, uint256 amount);\n\n    /// @dev Emitted when an outbound transfer is initiated, i.e. tokens are withdrawn to L1 from L2\n    event WithdrawalInitiated(\n        address l1Token,\n        address indexed from,\n        address indexed to,\n        uint256 indexed sequenceNumber,\n        uint256 amount\n    );\n\n    /**\n     * @notice L2 Token Gateway Contract Constructor.\n     * @param _l1Token Address of the L1 GRT contract\n     * @param _l2Token Address of the L2 GRT contract\n     */\n    constructor(address _l1Token, address _l2Token) {\n        l1Token = _l1Token;\n        l2Token = _l2Token;\n    }\n\n    /**\n     * @notice Creates and sends a (fake) transfer of GRT to L1.\n     * This mock will actually just emit an event with parameters equivalent to what the real L2GraphTokenGateway\n     * would send to L1.\n     * @param _l1Token L1 Address of the GRT contract (needed for compatibility with Arbitrum Gateway Router)\n     * @param _to Recipient address on L2\n     * @param _amount Amount of tokens to tranfer\n     * @param _data Encoded maxSubmissionCost and sender address along with additional calldata\n     * @return ID of the L2-L1 message (incrementing on every call)\n     */\n    function outboundTransfer(\n        address _l1Token,\n        address _to,\n        uint256 _amount,\n        uint256,\n        uint256,\n        bytes calldata _data\n    ) external payable returns (bytes memory) {\n        require(_l1Token == l1Token, \"INVALID_L1_TOKEN\");\n        require(_amount > 0, \"INVALID_ZERO_AMOUNT\");\n        require(_to != address(0), \"INVALID_DESTINATION\");\n\n        // nested scopes to avoid stack too deep errors\n        address from;\n        uint256 id = nextId;\n        nextId += 1;\n        {\n            bytes memory outboundCalldata;\n            {\n                bytes memory extraData;\n                (from, extraData) = _parseOutboundData(_data);\n\n                require(msg.value == 0, \"!value\");\n                require(extraData.length == 0, \"!extraData\");\n                outboundCalldata = getOutboundCalldata(_l1Token, from, _to, _amount, extraData);\n            }\n            {\n                // burn tokens from the sender, they will be released from escrow in L1\n                GraphTokenMock(l2Token).bridgeBurn(from, _amount);\n\n                emit FakeTxToL1(from, outboundCalldata);\n            }\n        }\n        emit WithdrawalInitiated(_l1Token, from, _to, id, _amount);\n\n        return abi.encode(id);\n    }\n\n    /**\n     * @notice (Mock) Receives withdrawn tokens from L1\n     * Implements calling callhooks if data is non-empty.\n     * @param _l1Token L1 Address of the GRT contract (needed for compatibility with Arbitrum Gateway Router)\n     * @param _from Address of the sender\n     * @param _to Recipient address on L1\n     * @param _amount Amount of tokens transferred\n     * @param _data Additional calldata, will trigger an onTokenTransfer call if non-empty\n     */\n    function finalizeInboundTransfer(\n        address _l1Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external payable {\n        require(_l1Token == l1Token, \"TOKEN_NOT_GRT\");\n        require(msg.value == 0, \"INVALID_NONZERO_VALUE\");\n\n        GraphTokenMock(l2Token).bridgeMint(_to, _amount);\n\n        if (_data.length > 0) {\n            ICallhookReceiver(_to).onTokenTransfer(_from, _amount, _data);\n        }\n\n        emit DepositFinalized(_l1Token, _from, _to, _amount);\n    }\n\n    /**\n     * @notice Calculate the L2 address of a bridged token\n     * @dev In our case, this would only work for GRT.\n     * @param l1ERC20 address of L1 GRT contract\n     * @return L2 address of the bridged GRT token\n     */\n    function calculateL2TokenAddress(address l1ERC20) public view returns (address) {\n        if (l1ERC20 != l1Token) {\n            return address(0);\n        }\n        return l2Token;\n    }\n\n    /**\n     * @notice Creates calldata required to create a tx to L1\n     * @param _l1Token Address of the Graph token contract on L1\n     * @param _from Address on L2 from which we're transferring tokens\n     * @param _to Address on L1 to which we're transferring tokens\n     * @param _amount Amount of GRT to transfer\n     * @param _data Additional call data for the L1 transaction, which must be empty\n     * @return Encoded calldata (including function selector) for the L1 transaction\n     */\n    function getOutboundCalldata(\n        address _l1Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data\n    ) public pure returns (bytes memory) {\n        return\n            abi.encodeWithSelector(\n                ITokenGateway.finalizeInboundTransfer.selector,\n                _l1Token,\n                _from,\n                _to,\n                _amount,\n                abi.encode(0, _data)\n            );\n    }\n\n    /**\n     * @dev Decodes calldata required for transfer of tokens to L1.\n     * extraData can be left empty\n     * @param _data Encoded callhook data\n     * @return Sender of the tx\n     * @return Any other data sent to L1\n     */\n    function _parseOutboundData(bytes calldata _data) private view returns (address, bytes memory) {\n        address from;\n        bytes memory extraData;\n        // The mock doesn't take messages from the Router\n        from = msg.sender;\n        extraData = _data;\n        return (from, extraData);\n    }\n}\n"
    },
    "contracts/tests/Stakes.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title A collection of data structures and functions to manage the Indexer Stake state.\n *        Used for low-level state changes, require() conditions should be evaluated\n *        at the caller function scope.\n */\nlibrary Stakes {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    struct Indexer {\n        uint256 tokensStaked; // Tokens on the indexer stake (staked by the indexer)\n        uint256 tokensAllocated; // Tokens used in allocations\n        uint256 tokensLocked; // Tokens locked for withdrawal subject to thawing period\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\n    }\n\n    /**\n     * @dev Deposit tokens to the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to deposit\n     */\n    function deposit(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.add(_tokens);\n    }\n\n    /**\n     * @dev Release tokens from the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to release\n     */\n    function release(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.sub(_tokens);\n    }\n\n    /**\n     * @dev Allocate tokens from the main stack to a SubgraphDeployment.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to allocate\n     */\n    function allocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.add(_tokens);\n    }\n\n    /**\n     * @dev Unallocate tokens from a SubgraphDeployment back to the main stack.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unallocate\n     */\n    function unallocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.sub(_tokens);\n    }\n\n    /**\n     * @dev Lock tokens until a thawing period pass.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _period Period in blocks that need to pass before withdrawal\n     */\n    function lockTokens(Stakes.Indexer storage stake, uint256 _tokens, uint256 _period) internal {\n        // Take into account period averaging for multiple unstake requests\n        uint256 lockingPeriod = _period;\n        if (stake.tokensLocked > 0) {\n            lockingPeriod = stake.getLockingPeriod(_tokens, _period);\n        }\n\n        // Update balances\n        stake.tokensLocked = stake.tokensLocked.add(_tokens);\n        stake.tokensLockedUntil = block.number.add(lockingPeriod);\n    }\n\n    /**\n     * @dev Unlock tokens.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unkock\n     */\n    function unlockTokens(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensLocked = stake.tokensLocked.sub(_tokens);\n        if (stake.tokensLocked == 0) {\n            stake.tokensLockedUntil = 0;\n        }\n    }\n\n    /**\n     * @dev Take all tokens out from the locked stake for withdrawal.\n     * @param stake Stake data\n     * @return Amount of tokens being withdrawn\n     */\n    function withdrawTokens(Stakes.Indexer storage stake) internal returns (uint256) {\n        // Calculate tokens that can be released\n        uint256 tokensToWithdraw = stake.tokensWithdrawable();\n\n        if (tokensToWithdraw > 0) {\n            // Reset locked tokens\n            stake.unlockTokens(tokensToWithdraw);\n\n            // Decrease indexer stake\n            stake.release(tokensToWithdraw);\n        }\n\n        return tokensToWithdraw;\n    }\n\n    /**\n     * @dev Get the locking period of the tokens to unstake.\n     * If already unstaked before calculate the weighted average.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _thawingPeriod Period in blocks that need to pass before withdrawal\n     * @return True if staked\n     */\n    function getLockingPeriod(\n        Stakes.Indexer memory stake,\n        uint256 _tokens,\n        uint256 _thawingPeriod\n    ) internal view returns (uint256) {\n        uint256 blockNum = block.number;\n        uint256 periodA = (stake.tokensLockedUntil > blockNum) ? stake.tokensLockedUntil.sub(blockNum) : 0;\n        uint256 periodB = _thawingPeriod;\n        uint256 stakeA = stake.tokensLocked;\n        uint256 stakeB = _tokens;\n        return periodA.mul(stakeA).add(periodB.mul(stakeB)).div(stakeA.add(stakeB));\n    }\n\n    /**\n     * @dev Return true if there are tokens staked by the Indexer.\n     * @param stake Stake data\n     * @return True if staked\n     */\n    function hasTokens(Stakes.Indexer memory stake) internal pure returns (bool) {\n        return stake.tokensStaked > 0;\n    }\n\n    /**\n     * @dev Return the amount of tokens used in allocations and locked for withdrawal.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensUsed(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAllocated.add(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Return the amount of tokens staked not considering the ones that are already going\n     * through the thawing period or are ready for withdrawal. We call it secure stake because\n     * it is not subject to change by a withdraw call from the indexer.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensSecureStake(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensStaked.sub(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for any purpose.\n     * Any token that is allocated cannot be used as well as tokens that are going through the\n     * thawing period or are withdrawable\n     * Calc: tokensStaked - tokensAllocated - tokensLocked\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensAvailable(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAvailableWithDelegation(0);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for allocations.\n     * This function accepts a parameter for extra delegated capacity that takes into\n     * account delegated tokens\n     * @param stake Stake data\n     * @param _delegatedCapacity Amount of tokens used from delegators to calculate availability\n     * @return Token amount\n     */\n    function tokensAvailableWithDelegation(\n        Stakes.Indexer memory stake,\n        uint256 _delegatedCapacity\n    ) internal pure returns (uint256) {\n        uint256 tokensCapacity = stake.tokensStaked.add(_delegatedCapacity);\n        uint256 _tokensUsed = stake.tokensUsed();\n        // If more tokens are used than the current capacity, the indexer is overallocated.\n        // This means the indexer doesn't have available capacity to create new allocations.\n        // We can reach this state when the indexer has funds allocated and then any\n        // of these conditions happen:\n        // - The delegationCapacity ratio is reduced.\n        // - The indexer stake is slashed.\n        // - A delegator removes enough stake.\n        if (_tokensUsed > tokensCapacity) {\n            // Indexer stake is over allocated: return 0 to avoid stake to be used until\n            // the overallocation is restored by staking more tokens, unallocating tokens\n            // or using more delegated funds\n            return 0;\n        }\n        return tokensCapacity.sub(_tokensUsed);\n    }\n\n    /**\n     * @dev Tokens available for withdrawal after thawing period.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensWithdrawable(Stakes.Indexer memory stake) internal view returns (uint256) {\n        // No tokens to withdraw before locking period\n        if (stake.tokensLockedUntil == 0 || block.number < stake.tokensLockedUntil) {\n            return 0;\n        }\n        return stake.tokensLocked;\n    }\n}\n"
    },
    "contracts/tests/StakingMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./Stakes.sol\";\n\ncontract StakingMock {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    // -- State --\n\n    uint256 public minimumIndexerStake = 100e18;\n    uint256 public thawingPeriod = 10; // 10 blocks\n    IERC20 public token;\n\n    // Indexer stakes : indexer => Stake\n    mapping(address => Stakes.Indexer) public stakes;\n\n    /**\n     * @dev Emitted when `indexer` stake `tokens` amount.\n     */\n    event StakeDeposited(address indexed indexer, uint256 tokens);\n\n    /**\n     * @dev Emitted when `indexer` unstaked and locked `tokens` amount `until` block.\n     */\n    event StakeLocked(address indexed indexer, uint256 tokens, uint256 until);\n\n    /**\n     * @dev Emitted when `indexer` withdrew `tokens` staked.\n     */\n    event StakeWithdrawn(address indexed indexer, uint256 tokens);\n\n    // Contract constructor.\n    constructor(IERC20 _token) {\n        require(address(_token) != address(0), \"!token\");\n        token = _token;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _tokens Amount of tokens to stake\n     */\n    function stake(uint256 _tokens) external {\n        stakeTo(msg.sender, _tokens);\n    }\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _indexer Address of the indexer\n     * @param _tokens Amount of tokens to stake\n     */\n    function stakeTo(address _indexer, uint256 _tokens) public {\n        require(_tokens > 0, \"!tokens\");\n\n        // Ensure minimum stake\n        require(stakes[_indexer].tokensSecureStake().add(_tokens) >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Transfer tokens to stake from caller to this contract\n        require(token.transferFrom(msg.sender, address(this), _tokens), \"!transfer\");\n\n        // Stake the transferred tokens\n        _stake(_indexer, _tokens);\n    }\n\n    /**\n     * @dev Unstake tokens from the indexer stake, lock them until thawing period expires.\n     * @param _tokens Amount of tokens to unstake\n     */\n    function unstake(uint256 _tokens) external {\n        address indexer = msg.sender;\n        Stakes.Indexer storage indexerStake = stakes[indexer];\n\n        require(_tokens > 0, \"!tokens\");\n        require(indexerStake.hasTokens(), \"!stake\");\n        require(indexerStake.tokensAvailable() >= _tokens, \"!stake-avail\");\n\n        // Ensure minimum stake\n        uint256 newStake = indexerStake.tokensSecureStake().sub(_tokens);\n        require(newStake == 0 || newStake >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Before locking more tokens, withdraw any unlocked ones\n        uint256 tokensToWithdraw = indexerStake.tokensWithdrawable();\n        if (tokensToWithdraw > 0) {\n            _withdraw(indexer);\n        }\n\n        indexerStake.lockTokens(_tokens, thawingPeriod);\n\n        emit StakeLocked(indexer, indexerStake.tokensLocked, indexerStake.tokensLockedUntil);\n    }\n\n    /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     */\n    function withdraw() external {\n        _withdraw(msg.sender);\n    }\n\n    function _stake(address _indexer, uint256 _tokens) internal {\n        // Deposit tokens into the indexer stake\n        Stakes.Indexer storage indexerStake = stakes[_indexer];\n        indexerStake.deposit(_tokens);\n\n        emit StakeDeposited(_indexer, _tokens);\n    }\n\n    /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     * @param _indexer Address of indexer to withdraw funds from\n     */\n    function _withdraw(address _indexer) private {\n        // Get tokens available for withdraw and update balance\n        uint256 tokensToWithdraw = stakes[_indexer].withdrawTokens();\n        require(tokensToWithdraw > 0, \"!tokens\");\n\n        // Return tokens to the indexer\n        require(token.transfer(_indexer, tokensToWithdraw), \"!transfer\");\n\n        emit StakeWithdrawn(_indexer, tokensToWithdraw);\n    }\n}\n"
    },
    "contracts/tests/WalletMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title WalletMock: a mock wallet contract for testing purposes\n * @dev For testing only, DO NOT USE IN PRODUCTION.\n * This is used to test L1-L2 transfer tools and to create scenarios\n * where an invalid wallet calls the transfer tool, e.g. a wallet that has an invalid\n * manager, or a wallet that has not been initialized.\n */\ncontract WalletMock {\n    /// Target contract for the fallback function (usually a transfer tool contract)\n    address public immutable target;\n    /// Address of the GRT (mock) token\n    address public immutable token;\n    /// Address of the wallet's manager\n    address public immutable manager;\n    /// Whether the wallet has been initialized\n    bool public immutable isInitialized;\n    /// Whether the beneficiary has accepted the lock\n    bool public immutable isAccepted;\n\n    /**\n     * @notice WalletMock constructor\n     * @dev This constructor sets all the state variables so that\n     * specific test scenarios can be created just by deploying this contract.\n     * @param _target Target contract for the fallback function\n     * @param _token Address of the GRT (mock) token\n     * @param _manager Address of the wallet's manager\n     * @param _isInitialized Whether the wallet has been initialized\n     * @param _isAccepted Whether the beneficiary has accepted the lock\n     */\n    constructor(address _target, address _token, address _manager, bool _isInitialized, bool _isAccepted) {\n        target = _target;\n        token = _token;\n        manager = _manager;\n        isInitialized = _isInitialized;\n        isAccepted = _isAccepted;\n    }\n\n    /**\n     * @notice Fallback function\n     * @dev This function calls the target contract with the data sent to this contract.\n     * This is used to test the L1-L2 transfer tool.\n     */\n    fallback() external payable {\n        // Call function with data\n        Address.functionCall(target, msg.data);\n    }\n\n    /**\n     * @notice Receive function\n     * @dev This function is added to avoid compiler warnings, but just reverts.\n     */\n    receive() external payable {\n        revert(\"Invalid call\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}