{
  "language": "Solidity",
  "sources": {
    "contracts/GraphTokenLockWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./GraphTokenLock.sol\";\nimport \"./IGraphTokenLockManager.sol\";\n\n/**\n * @title GraphTokenLockWallet\n * @notice This contract is built on top of the base GraphTokenLock functionality.\n * It allows wallet beneficiaries to use the deposited funds to perform specific function calls\n * on specific contracts.\n *\n * The idea is that supporters with locked tokens can participate in the protocol\n * but disallow any release before the vesting/lock schedule.\n * The beneficiary can issue authorized function calls to this contract that will\n * get forwarded to a target contract. A target contract is any of our protocol contracts.\n * The function calls allowed are queried to the GraphTokenLockManager, this way\n * the same configuration can be shared for all the created lock wallet contracts.\n *\n * NOTE: Contracts used as target must have its function signatures checked to avoid collisions\n * with any of this contract functions.\n * Beneficiaries need to approve the use of the tokens to the protocol contracts. For convenience\n * the maximum amount of tokens is authorized.\n */\ncontract GraphTokenLockWallet is GraphTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // -- State --\n\n    IGraphTokenLockManager public manager;\n    uint256 public usedAmount;\n\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    // -- Events --\n\n    event ManagerUpdated(address indexed _oldManager, address indexed _newManager);\n    event TokenDestinationsApproved();\n    event TokenDestinationsRevoked();\n\n    // Initializer\n    function initialize(\n        address _manager,\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        _setManager(_manager);\n    }\n\n    // -- Admin --\n\n    /**\n     * @notice Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function setManager(address _newManager) external onlyOwner {\n        _setManager(_newManager);\n    }\n\n    /**\n     * @dev Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function _setManager(address _newManager) private {\n        require(_newManager != address(0), \"Manager cannot be empty\");\n        require(Address.isContract(_newManager), \"Manager must be a contract\");\n\n        address oldManager = address(manager);\n        manager = IGraphTokenLockManager(_newManager);\n\n        emit ManagerUpdated(oldManager, _newManager);\n    }\n\n    // -- Beneficiary --\n\n    /**\n     * @notice Approves protocol access of the tokens managed by this contract\n     * @dev Approves all token destinations registered in the manager to pull tokens\n     */\n    function approveProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            token.safeApprove(dstList[i], MAX_UINT256);\n        }\n        emit TokenDestinationsApproved();\n    }\n\n    /**\n     * @notice Revokes protocol access of the tokens managed by this contract\n     * @dev Revokes approval to all token destinations in the manager to pull tokens\n     */\n    function revokeProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            token.safeApprove(dstList[i], 0);\n        }\n        emit TokenDestinationsRevoked();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule, takes into account already released tokens and used amount\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view override returns (uint256) {\n        if (revocable == Revocability.Disabled) {\n            return super.releasableAmount();\n        }\n\n        // -- Revocability enabled logic\n        // This needs to deal with additional considerations for when tokens are used in the protocol\n\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        // We consider the `usedAmount` in the protocol as part of the calculations\n        // the beneficiary should not release funds that are used.\n        uint256 releasable = availableAmount().sub(releasedAmount).sub(usedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Forward authorized contract calls to protocol contracts\n     * @dev Fallback function can be called by the beneficiary only if function call is allowed\n     */\n    fallback() external payable {\n        // Only beneficiary can forward calls\n        require(msg.sender == beneficiary, \"Unauthorized caller\");\n\n        // Function call validation\n        address _target = manager.getAuthFunctionCallTarget(msg.sig);\n        require(_target != address(0), \"Unauthorized function\");\n\n        uint256 oldBalance = currentBalance();\n\n        // Call function with data\n        Address.functionCall(_target, msg.data);\n\n        // Tracked used tokens in the protocol\n        // We do this check after balances were updated by the forwarded call\n        // Check is only enforced for revocable contracts to save some gas\n        if (revocable == Revocability.Enabled) {\n            // Track contract balance change\n            uint256 newBalance = currentBalance();\n            if (newBalance < oldBalance) {\n                // Outflow\n                uint256 diff = oldBalance.sub(newBalance);\n                usedAmount = usedAmount.add(diff);\n            } else {\n                // Inflow: We can receive profits from the protocol, that could make usedAmount to\n                // underflow. We set it to zero in that case.\n                uint256 diff = newBalance.sub(oldBalance);\n                usedAmount = (diff >= usedAmount) ? 0 : usedAmount.sub(diff);\n            }\n            require(usedAmount <= vestedAmount(), \"Cannot use more tokens than vested amount\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/GraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./Ownable.sol\";\nimport \"./MathUtils.sol\";\nimport \"./IGraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLock\n * @notice Contract that manages an unlocking schedule of tokens.\n * @dev The contract lock manage a number of tokens deposited into the contract to ensure that\n * they can only be released under certain time conditions.\n *\n * This contract implements a release scheduled based on periods and tokens are released in steps\n * after each period ends. It can be configured with one period in which case it is like a plain TimeLock.\n * It also supports revocation to be used for vesting schedules.\n *\n * The contract supports receiving extra funds than the managed tokens ones that can be\n * withdrawn by the beneficiary at any time.\n *\n * A releaseStartTime parameter is included to override the default release schedule and\n * perform the first release on the configured time. After that it will continue with the\n * default schedule.\n */\nabstract contract GraphTokenLock is Ownable, IGraphTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MIN_PERIOD = 1;\n\n    // -- State --\n\n    IERC20 public token;\n    address public beneficiary;\n\n    // Configuration\n\n    // Amount of tokens managed by the contract schedule\n    uint256 public managedAmount;\n\n    uint256 public startTime; // Start datetime (in unixtimestamp)\n    uint256 public endTime; // Datetime after all funds are fully vested/unlocked (in unixtimestamp)\n    uint256 public periods; // Number of vesting/release periods\n\n    // First release date for tokens (in unixtimestamp)\n    // If set, no tokens will be released before releaseStartTime ignoring\n    // the amount to release each period\n    uint256 public releaseStartTime;\n    // A cliff set a date to which a beneficiary needs to get to vest\n    // all preceding periods\n    uint256 public vestingCliffTime;\n    Revocability public revocable; // Whether to use vesting for locked funds\n\n    // State\n\n    bool public isRevoked;\n    bool public isInitialized;\n    bool public isAccepted;\n    uint256 public releasedAmount;\n    uint256 public revokedAmount;\n\n    // -- Events --\n\n    event TokensReleased(address indexed beneficiary, uint256 amount);\n    event TokensWithdrawn(address indexed beneficiary, uint256 amount);\n    event TokensRevoked(address indexed beneficiary, uint256 amount);\n    event BeneficiaryChanged(address newBeneficiary);\n    event LockAccepted();\n    event LockCanceled();\n\n    /**\n     * @dev Only allow calls from the beneficiary of the contract\n     */\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"!auth\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _vestingCliffTime Override time for when the vesting start\n     * @param _revocable Whether the contract is revocable\n     */\n    function _initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) internal {\n        require(!isInitialized, \"Already initialized\");\n        require(_owner != address(0), \"Owner cannot be zero\");\n        require(_beneficiary != address(0), \"Beneficiary cannot be zero\");\n        require(_token != address(0), \"Token cannot be zero\");\n        require(_managedAmount > 0, \"Managed tokens cannot be zero\");\n        require(_startTime != 0, \"Start time must be set\");\n        require(_startTime < _endTime, \"Start time > end time\");\n        require(_periods >= MIN_PERIOD, \"Periods cannot be below minimum\");\n        require(_revocable != Revocability.NotSet, \"Must set a revocability option\");\n        require(_releaseStartTime < _endTime, \"Release start time must be before end time\");\n        require(_vestingCliffTime < _endTime, \"Cliff time must be before end time\");\n\n        isInitialized = true;\n\n        Ownable.initialize(_owner);\n        beneficiary = _beneficiary;\n        token = IERC20(_token);\n\n        managedAmount = _managedAmount;\n\n        startTime = _startTime;\n        endTime = _endTime;\n        periods = _periods;\n\n        // Optionals\n        releaseStartTime = _releaseStartTime;\n        vestingCliffTime = _vestingCliffTime;\n        revocable = _revocable;\n    }\n\n    /**\n     * @notice Change the beneficiary of funds managed by the contract\n     * @dev Can only be called by the beneficiary\n     * @param _newBeneficiary Address of the new beneficiary address\n     */\n    function changeBeneficiary(address _newBeneficiary) external onlyBeneficiary {\n        require(_newBeneficiary != address(0), \"Empty beneficiary\");\n        beneficiary = _newBeneficiary;\n        emit BeneficiaryChanged(_newBeneficiary);\n    }\n\n    /**\n     * @notice Beneficiary accepts the lock, the owner cannot retrieve back the tokens\n     * @dev Can only be called by the beneficiary\n     */\n    function acceptLock() external onlyBeneficiary {\n        isAccepted = true;\n        emit LockAccepted();\n    }\n\n    /**\n     * @notice Owner cancel the lock and return the balance in the contract\n     * @dev Can only be called by the owner\n     */\n    function cancelLock() external onlyOwner {\n        require(isAccepted == false, \"Cannot cancel accepted contract\");\n\n        token.safeTransfer(owner(), currentBalance());\n\n        emit LockCanceled();\n    }\n\n    // -- Balances --\n\n    /**\n     * @notice Returns the amount of tokens currently held by the contract\n     * @return Tokens held in the contract\n     */\n    function currentBalance() public view override returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    // -- Time & Periods --\n\n    /**\n     * @notice Returns the current block timestamp\n     * @return Current block timestamp\n     */\n    function currentTime() public view override returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Gets duration of contract from start to end in seconds\n     * @return Amount of seconds from contract startTime to endTime\n     */\n    function duration() public view override returns (uint256) {\n        return endTime.sub(startTime);\n    }\n\n    /**\n     * @notice Gets time elapsed since the start of the contract\n     * @dev Returns zero if called before conctract starTime\n     * @return Seconds elapsed from contract startTime\n     */\n    function sinceStartTime() public view override returns (uint256) {\n        uint256 current = currentTime();\n        if (current <= startTime) {\n            return 0;\n        }\n        return current.sub(startTime);\n    }\n\n    /**\n     * @notice Returns amount available to be released after each period according to schedule\n     * @return Amount of tokens available after each period\n     */\n    function amountPerPeriod() public view override returns (uint256) {\n        return managedAmount.div(periods);\n    }\n\n    /**\n     * @notice Returns the duration of each period in seconds\n     * @return Duration of each period in seconds\n     */\n    function periodDuration() public view override returns (uint256) {\n        return duration().div(periods);\n    }\n\n    /**\n     * @notice Gets the current period based on the schedule\n     * @return A number that represents the current period\n     */\n    function currentPeriod() public view override returns (uint256) {\n        return sinceStartTime().div(periodDuration()).add(MIN_PERIOD);\n    }\n\n    /**\n     * @notice Gets the number of periods that passed since the first period\n     * @return A number of periods that passed since the schedule started\n     */\n    function passedPeriods() public view override returns (uint256) {\n        return currentPeriod().sub(MIN_PERIOD);\n    }\n\n    // -- Locking & Release Schedule --\n\n    /**\n     * @notice Gets the currently available token according to the schedule\n     * @dev Implements the step-by-step schedule based on periods for available tokens\n     * @return Amount of tokens available according to the schedule\n     */\n    function availableAmount() public view override returns (uint256) {\n        uint256 current = currentTime();\n\n        // Before contract start no funds are available\n        if (current < startTime) {\n            return 0;\n        }\n\n        // After contract ended all funds are available\n        if (current > endTime) {\n            return managedAmount;\n        }\n\n        // Get available amount based on period\n        return passedPeriods().mul(amountPerPeriod());\n    }\n\n    /**\n     * @notice Gets the amount of currently vested tokens\n     * @dev Similar to available amount, but is fully vested when contract is non-revocable\n     * @return Amount of tokens already vested\n     */\n    function vestedAmount() public view override returns (uint256) {\n        // If non-revocable it is fully vested\n        if (revocable == Revocability.Disabled) {\n            return managedAmount;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        if (vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        return availableAmount();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule and takes into account already released tokens\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view virtual override returns (uint256) {\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        uint256 releasable = availableAmount().sub(releasedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Gets the outstanding amount yet to be released based on the whole contract lifetime\n     * @dev Does not consider schedule but just global amounts tracked\n     * @return Amount of outstanding tokens for the lifetime of the contract\n     */\n    function totalOutstandingAmount() public view override returns (uint256) {\n        return managedAmount.sub(releasedAmount).sub(revokedAmount);\n    }\n\n    /**\n     * @notice Gets surplus amount in the contract based on outstanding amount to release\n     * @dev All funds over outstanding amount is considered surplus that can be withdrawn by beneficiary\n     * @return Amount of tokens considered as surplus\n     */\n    function surplusAmount() public view override returns (uint256) {\n        uint256 balance = currentBalance();\n        uint256 outstandingAmount = totalOutstandingAmount();\n        if (balance > outstandingAmount) {\n            return balance.sub(outstandingAmount);\n        }\n        return 0;\n    }\n\n    // -- Value Transfer --\n\n    /**\n     * @notice Releases tokens based on the configured schedule\n     * @dev All available releasable tokens are transferred to beneficiary\n     */\n    function release() external override onlyBeneficiary {\n        uint256 amountToRelease = releasableAmount();\n        require(amountToRelease > 0, \"No available releasable amount\");\n\n        releasedAmount = releasedAmount.add(amountToRelease);\n\n        token.safeTransfer(beneficiary, amountToRelease);\n\n        emit TokensReleased(beneficiary, amountToRelease);\n    }\n\n    /**\n     * @notice Withdraws surplus, unmanaged tokens from the contract\n     * @dev Tokens in the contract over outstanding amount are considered as surplus\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdrawSurplus(uint256 _amount) external override onlyBeneficiary {\n        require(_amount > 0, \"Amount cannot be zero\");\n        require(surplusAmount() >= _amount, \"Amount requested > surplus available\");\n\n        token.safeTransfer(beneficiary, _amount);\n\n        emit TokensWithdrawn(beneficiary, _amount);\n    }\n\n    /**\n     * @notice Revokes a vesting schedule and return the unvested tokens to the owner\n     * @dev Vesting schedule is always calculated based on managed tokens\n     */\n    function revoke() external override onlyOwner {\n        require(revocable == Revocability.Enabled, \"Contract is non-revocable\");\n        require(isRevoked == false, \"Already revoked\");\n\n        uint256 unvestedAmount = managedAmount.sub(vestedAmount());\n        require(unvestedAmount > 0, \"No available unvested amount\");\n\n        revokedAmount = unvestedAmount;\n        isRevoked = true;\n\n        token.safeTransfer(owner(), unvestedAmount);\n\n        emit TokensRevoked(beneficiary, unvestedAmount);\n    }\n}\n"
    },
    "contracts/IGraphTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IGraphTokenLock.sol\";\n\ninterface IGraphTokenLockManager {\n    // -- Factory --\n\n    function setMasterCopy(address _masterCopy) external;\n\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IGraphTokenLock.Revocability _revocable\n    ) external;\n\n    // -- Funds Management --\n\n    function token() external returns (IERC20);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    // -- Allowed Funds Destinations --\n\n    function addTokenDestination(address _dst) external;\n\n    function removeTokenDestination(address _dst) external;\n\n    function isTokenDestination(address _dst) external view returns (bool);\n\n    function getTokenDestinations() external view returns (address[] memory);\n\n    // -- Function Call Authorization --\n\n    function setAuthFunctionCall(string calldata _signature, address _target) external;\n\n    function unsetAuthFunctionCall(string calldata _signature) external;\n\n    function setAuthFunctionCallMany(string[] calldata _signatures, address[] calldata _targets) external;\n\n    function getAuthFunctionCallTarget(bytes4 _sigHash) external view returns (address);\n\n    function isAuthFunctionCall(bytes4 _sigHash) external view returns (bool);\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The owner account will be passed on initialization of the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address owner) internal {\n        _owner = owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nlibrary MathUtils {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/IGraphTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IGraphTokenLock {\n    enum Revocability {\n        NotSet,\n        Enabled,\n        Disabled\n    }\n\n    // -- Balances --\n\n    function currentBalance() external view returns (uint256);\n\n    // -- Time & Periods --\n\n    function currentTime() external view returns (uint256);\n\n    function duration() external view returns (uint256);\n\n    function sinceStartTime() external view returns (uint256);\n\n    function amountPerPeriod() external view returns (uint256);\n\n    function periodDuration() external view returns (uint256);\n\n    function currentPeriod() external view returns (uint256);\n\n    function passedPeriods() external view returns (uint256);\n\n    // -- Locking & Release Schedule --\n\n    function availableAmount() external view returns (uint256);\n\n    function vestedAmount() external view returns (uint256);\n\n    function releasableAmount() external view returns (uint256);\n\n    function totalOutstandingAmount() external view returns (uint256);\n\n    function surplusAmount() external view returns (uint256);\n\n    // -- Value Transfer --\n\n    function release() external;\n\n    function withdrawSurplus(uint256 _amount) external;\n\n    function revoke() external;\n}\n"
    },
    "contracts/GraphTokenLockSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"./GraphTokenLock.sol\";\n\n/**\n * @title GraphTokenLockSimple\n * @notice This contract is the concrete simple implementation built on top of the base\n * GraphTokenLock functionality for use when we only need the token lock schedule\n * features but no interaction with the network.\n * \n * This contract is designed to be deployed without the use of a TokenManager.\n */\ncontract GraphTokenLockSimple is GraphTokenLock {\n    // Constructor\n    constructor() {\n        Ownable.initialize(msg.sender);\n    }\n\n    // Initializer\n    function initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external onlyOwner {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}